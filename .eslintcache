[{"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/index.jsx":"1","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/reportWebVitals.js":"2","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/App.jsx":"3","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/index.js":"4","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/index.js":"5","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/index.js":"6","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/reducers/index.js":"7","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/index/Index.jsx":"8","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/arbitrage/Arbitrage.jsx":"9","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/crafting/Crafting.jsx":"10","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/convenants/Covenants.jsx":"11","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/farm/Farm.jsx":"12","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/grimoire/Grimoire.jsx":"13","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/multiswap/Multiswap.jsx":"14","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/bazaar/Bazaar.jsx":"15","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/inflation/Inflation.jsx":"16","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/wusd/WUSD.jsx":"17","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/page-container/index.js":"18","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/pages/index.js":"19","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/index.js":"20","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/reducers/session/index.js":"21","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/reducers/core/index.js":"22","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/crafting/dapp/dapp.jsx":"23","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/farm/dapp/dapp.jsx":"24","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/bazaar/dapp/dapp.jsx":"25","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/inflation/dapp/dapp.jsx":"26","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/wusd/dapp/dapp.jsx":"27","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/pages/ComingSoon.jsx":"28","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/page-container/PageContainer.jsx":"29","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/pages/NotFound.jsx":"30","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/footer/Footer.jsx":"31","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/sidemenu/Sidemenu.jsx":"32","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/input/Input.jsx":"33","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/coin/Coin.jsx":"34","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/farming/FarmingComponent.jsx":"35","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/buttons/ApproveButton.jsx":"36","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/dapp-menu/DappMenu.jsx":"37","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/farming/SetupComponent.jsx":"38","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/token-input/TokenInput.jsx":"39","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/inflation/FixedInflationComponent.jsx":"40","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/header/Header.jsx":"41","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/data/context.json.js":"42","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/types/index.js":"43","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/actions/index.js":"44","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/core/index.js":"45","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/farm/dapp/components/index.js":"46","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/wusd/dapp/components/index.js":"47","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/inflation/dapp/components/index.js":"48","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/farm/dapp/components/Explore.jsx":"49","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/farm/dapp/components/Positions.jsx":"50","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/farm/dapp/components/ExploreFarmingContract.jsx":"51","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/farm/dapp/components/Hosted.jsx":"52","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/wusd/dapp/components/Farm.jsx":"53","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/wusd/dapp/components/Burn.jsx":"54","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/farm/dapp/components/Create.jsx":"55","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/wusd/dapp/components/Mint.jsx":"56","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/wusd/dapp/components/Stats.jsx":"57","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/wusd/dapp/components/USDN.jsx":"58","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/inflation/dapp/components/Create.jsx":"59","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/inflation/dapp/components/Explore.jsx":"60","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/wusd/dapp/components/Arbitrate.jsx":"61","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/inflation/dapp/components/ExploreInflationContract.jsx":"62","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/types/session/index.js":"63","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/types/core/index.js":"64","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/actions/session/index.js":"65","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/actions/core/index.js":"66","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/inflation/dapp/components/CreateSetup.jsx":"67","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/inflation/dapp/components/CreateEntry.jsx":"68","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/editor/ContractEditor.jsx":"69"},{"size":785,"mtime":1612563345534,"results":"70","hashOfConfig":"71"},{"size":364,"mtime":1610984401615,"results":"72","hashOfConfig":"71"},{"size":1931,"mtime":1612519275274,"results":"73","hashOfConfig":"71"},{"size":138,"mtime":1610984454992,"results":"74","hashOfConfig":"71"},{"size":590,"mtime":1611572553655,"results":"75","hashOfConfig":"71"},{"size":84,"mtime":1611790598259,"results":"76","hashOfConfig":"71"},{"size":258,"mtime":1610984510813,"results":"77","hashOfConfig":"71"},{"size":965,"mtime":1611569663570,"results":"78","hashOfConfig":"71"},{"size":152,"mtime":1611568273164,"results":"79","hashOfConfig":"71"},{"size":827,"mtime":1611570554113,"results":"80","hashOfConfig":"71"},{"size":195,"mtime":1611569896419,"results":"81","hashOfConfig":"71"},{"size":807,"mtime":1611756009197,"results":"82","hashOfConfig":"71"},{"size":197,"mtime":1611566345560,"results":"83","hashOfConfig":"71"},{"size":200,"mtime":1611566388493,"results":"84","hashOfConfig":"71"},{"size":824,"mtime":1611847931017,"results":"85","hashOfConfig":"71"},{"size":857,"mtime":1611848746326,"results":"86","hashOfConfig":"71"},{"size":801,"mtime":1611847848023,"results":"87","hashOfConfig":"71"},{"size":71,"mtime":1611566301485,"results":"88","hashOfConfig":"71"},{"size":123,"mtime":1611268081748,"results":"89","hashOfConfig":"71"},{"size":671,"mtime":1612535089504,"results":"90","hashOfConfig":"71"},{"size":3103,"mtime":1612538639094,"results":"91","hashOfConfig":"71"},{"size":1298,"mtime":1612519275275,"results":"92","hashOfConfig":"71"},{"size":63,"mtime":1611570546634,"results":"93","hashOfConfig":"71"},{"size":2986,"mtime":1611968041027,"results":"94","hashOfConfig":"71"},{"size":63,"mtime":1611570491033,"results":"95","hashOfConfig":"71"},{"size":2760,"mtime":1612265849986,"results":"96","hashOfConfig":"71"},{"size":2456,"mtime":1611749741880,"results":"97","hashOfConfig":"71"},{"size":98,"mtime":1611267818226,"results":"98","hashOfConfig":"71"},{"size":1528,"mtime":1611848714691,"results":"99","hashOfConfig":"71"},{"size":94,"mtime":1611267812407,"results":"100","hashOfConfig":"71"},{"size":82,"mtime":1611267463257,"results":"101","hashOfConfig":"71"},{"size":1519,"mtime":1612361647229,"results":"102","hashOfConfig":"71"},{"size":1815,"mtime":1612536914784,"results":"103","hashOfConfig":"71"},{"size":431,"mtime":1611748871339,"results":"104","hashOfConfig":"71"},{"size":5529,"mtime":1612562100533,"results":"105","hashOfConfig":"71"},{"size":1423,"mtime":1612400912107,"results":"106","hashOfConfig":"71"},{"size":911,"mtime":1612361647229,"results":"107","hashOfConfig":"71"},{"size":35145,"mtime":1612572915750,"results":"108","hashOfConfig":"71"},{"size":956,"mtime":1611874222239,"results":"109","hashOfConfig":"71"},{"size":2842,"mtime":1612361647229,"results":"110","hashOfConfig":"71"},{"size":3249,"mtime":1612519275274,"results":"111","hashOfConfig":"71"},{"size":247268,"mtime":1612561505971,"results":"112","hashOfConfig":"71"},{"size":50,"mtime":1610984478095,"results":"113","hashOfConfig":"71"},{"size":50,"mtime":1610984550021,"results":"114","hashOfConfig":"71"},{"size":11258,"mtime":1612563409549,"results":"115","hashOfConfig":"71"},{"size":266,"mtime":1611852778356,"results":"116","hashOfConfig":"71"},{"size":227,"mtime":1611617510813,"results":"117","hashOfConfig":"71"},{"size":185,"mtime":1612265841762,"results":"118","hashOfConfig":"71"},{"size":3995,"mtime":1612556502149,"results":"119","hashOfConfig":"71"},{"size":1190,"mtime":1612567859808,"results":"120","hashOfConfig":"71"},{"size":2189,"mtime":1612572340481,"results":"121","hashOfConfig":"71"},{"size":1564,"mtime":1612435687498,"results":"122","hashOfConfig":"71"},{"size":1969,"mtime":1612449105509,"results":"123","hashOfConfig":"71"},{"size":13469,"mtime":1612454550400,"results":"124","hashOfConfig":"71"},{"size":46614,"mtime":1612569444709,"results":"125","hashOfConfig":"71"},{"size":14162,"mtime":1612453868767,"results":"126","hashOfConfig":"71"},{"size":20300,"mtime":1612446828419,"results":"127","hashOfConfig":"71"},{"size":8978,"mtime":1612401811256,"results":"128","hashOfConfig":"71"},{"size":6233,"mtime":1612360140052,"results":"129","hashOfConfig":"71"},{"size":2752,"mtime":1612361659072,"results":"130","hashOfConfig":"71"},{"size":526,"mtime":1611617484189,"results":"131","hashOfConfig":"71"},{"size":1198,"mtime":1612264289078,"results":"132","hashOfConfig":"71"},{"size":597,"mtime":1612350824407,"results":"133","hashOfConfig":"71"},{"size":365,"mtime":1612519275276,"results":"134","hashOfConfig":"71"},{"size":1804,"mtime":1612352443860,"results":"135","hashOfConfig":"71"},{"size":1079,"mtime":1612519275275,"results":"136","hashOfConfig":"71"},{"size":10132,"mtime":1612361659072,"results":"137","hashOfConfig":"71"},{"size":19630,"mtime":1612361647229,"results":"138","hashOfConfig":"71"},{"size":4336,"mtime":1612565394721,"results":"139","hashOfConfig":"71"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ymyueu",{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"144"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"144"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"144"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"144"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"144"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"144"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"144"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"144"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"144"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"252","messages":"253","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"144"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"144"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"144"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"263","messages":"264","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"144"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"144"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"144"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"144"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"144"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"144"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"144"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"144"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"144"},"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/index.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/reportWebVitals.js",[],["300","301"],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/App.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/index.js",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/index.js",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/index.js",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/reducers/index.js",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/index/Index.jsx",["302"],"import dragonImage from '../../assets/images/dragon.png';\n\nconst lorem = 'Lorem ipsum dolor, sit amet consectetur adipisicing elit. Eaque quia consequuntur id magnam tempore animi eveniet quod dolor ipsa illo? Iure illo alias rem sapiente illum error laborum voluptatum quasi!';\n\nconst Index = () => {\n    return (\n        <div className=\"page-container-wrapper\">\n            <div className=\"page-container\">\n                <div className=\"page-container-row index-container-row\">\n                    <div className=\"page-container-col index-container-col\">\n                        <img src={dragonImage} className=\"index-image\" />\n                        <h2 className=\"index-title\">COVENANTS</h2>\n                    </div>\n                    <div className=\"page-container-col\">\n                        <p className=\"index-paragraph\">{lorem}</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Index;","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/arbitrage/Arbitrage.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/crafting/Crafting.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/convenants/Covenants.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/farm/Farm.jsx",["303"],"import { PageContainer } from \"../../components\";\nimport dragonImage from '../../assets/images/dragon.png';\nimport { Route, Switch, useParams } from \"react-router-dom\";\nimport FarmDapp from './dapp/dapp';\n\nconst lorem = 'Lorem ipsum dolor, sit amet consectetur adipisicing elit. Eaque quia consequuntur id magnam tempore animi eveniet quod dolor ipsa illo? Iure illo alias rem sapiente illum error laborum voluptatum quasi!';\n\nconst Farm = () => {\n\n    return (\n        <Switch>\n            <Route path=\"/farm/dapp\">\n                <FarmDapp />\n            </Route>\n            <Route path=\"/farm/\">\n                <PageContainer image={dragonImage} imageHeight={300} text={lorem} launchDapp={true} title={\"Farm\"} link={\"/farm/dapp\"} />\n            </Route>\n        </Switch>\n    )\n}\n\nexport default Farm;","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/grimoire/Grimoire.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/multiswap/Multiswap.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/bazaar/Bazaar.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/inflation/Inflation.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/wusd/WUSD.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/page-container/index.js",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/pages/index.js",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/index.js",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/reducers/session/index.js",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/reducers/core/index.js",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/crafting/dapp/dapp.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/farm/dapp/dapp.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/bazaar/dapp/dapp.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/inflation/dapp/dapp.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/wusd/dapp/dapp.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/pages/ComingSoon.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/page-container/PageContainer.jsx",["304"],"import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst PageContainer = (props) => {\n    return (\n        <div className=\"page-container-wrapper mt-4 mt-md-0\">\n            <div className=\"page-container\">\n                <div className=\"page-container-row\">\n                    <div className=\"col-md-6 col-12 flex flex-column mb-4 mb-md-0\" style={{justifyContent: 'space-evenly'}}>\n                        { props.title ? <h3><b>{props.title}</b></h3> : '' }\n                        { props.text ? <p>{props.text}</p> : props.children }\n                    </div>\n                    { props.image ? \n                        <div className=\"col-md-6 col-12 flex justify-content-center align-items-center my-4 my-md-0\">\n                            <img src={props.image} height={props.imageHeight || 350} />\n                        </div> : '' \n                    }\n                </div>\n                {\n                    props.launchDapp ? \n                    <div className=\"page-container-row\">\n                        <Link to={props.link}>\n                            <button className=\"btn btn-primary\">DAPP</button>\n                        </Link>\n                    </div> : <div/>\n                }\n            </div>\n        </div>\n    )\n}\n\nPageContainer.propTypes = {\n    image: PropTypes.string,\n    imageHeight: PropTypes.number,\n    launchDapp: PropTypes.bool,\n    link: PropTypes.string,\n    text: PropTypes.string,\n    title: PropTypes.string,\n}\n\nexport default PageContainer;","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/pages/NotFound.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/footer/Footer.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/sidemenu/Sidemenu.jsx",["305"],"import { Link, useLocation } from 'react-router-dom';\n\nconst menu = [\n    {\n        name: 'Farm', path: '/farm', asset: require('../../../assets/images/cloud.png').default,\n    },\n    {\n        name: 'Inflation', path: '/inflation', asset: require('../../../assets/images/cloud.png').default,\n    },\n    {\n        name: 'WUSD', path: '/wusd', asset: require('../../../assets/images/wusd.png').default,\n    },\n    {\n        name: 'Bazaar', path: '/bazaar', asset: require('../../../assets/images/bread.png').default,\n    },\n    {\n        name: 'Crafting', path: '/crafting', asset: require('../../../assets/images/bottle.png').default,\n    },\n    {\n        name: 'Grimoire', path: '/grimoire', asset: require('../../../assets/images/book.png').default,\n    },\n    {\n        name: 'Covenants', path: '/more', asset: require('../../../assets/images/sword.png').default,\n    }\n]\n\nconst Sidemenu = () => {\n    const location = useLocation();\n\n    return (\n        <ul className=\"nav app-sidemenu flex-column\">\n        {\n            menu.map(\n                (menuItem, index) => (\n                    <li className={`nav-link ${location.pathname.includes(menuItem.path) ? \"sidebar-menu-link-selected\" : \"\"}`} key={index}>\n                        <img src={menuItem.asset} className=\"mr-2\" height={48} />\n                        <Link className=\"sidebar-menu-link\" to={menuItem.path}>{menuItem.name}</Link>\n                    </li>\n                )\n            )\n        }   \n        </ul>\n    )\n}\n\nexport default Sidemenu;","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/input/Input.jsx",["306","307"],"import Coin from '../coin/Coin';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { useEffect } from 'react/cjs/react.development';\n\nconst Input = (props) => {\n    const { label, min, max, value, onChange, showBalance, balance, showMax, showCoin, address, name, step, extra } = props;\n    const [val, setVal] = useState(value);\n\n    useEffect(() => {\n        setVal(value);\n    }, [value])\n\n    const onDetectedChange = (value) => {\n        if (!value) return { target: { value: balance }};\n        return parseFloat(value) > parseFloat(balance) ? { target: { value: balance }} : { target: { value } };\n    } \n\n    return (\n        <>\n            { label && <h6><b>{label}</b></h6> }\n            <div className=\"input-group\" onBlur={() => onChange(onDetectedChange(val))}  tabIndex={0}>\n                {\n                    showMax && <div className=\"input-group-prepend\">\n                        <button className=\"btn btn-secondary\" onClick={() => onChange(onDetectedChange())} type=\"button\">MAX</button>\n                    </div>\n                }\n                <input type=\"number\" className={`form-control input-form-field ${parseFloat(val) > parseFloat(balance) ? 'is-invalid' : ''}`} value={val} min={min} max={max || balance} onChange={(e) => setVal(e.target.value)}/>\n                {\n                    showCoin && <div className={`input-group-append no-border-right`}>\n                        <span className={`input-group-text ${parseFloat(val) > parseFloat(balance) ? 'is-invalid' : ''}`} id=\"\"><Coin address={address} /> {name}</span>\n                    </div>\n                }\n            </div>\n            { showBalance && <small className=\"form-text text-muted\">Balance: {balance} {name} {extra ? extra : ''}</small> }\n        </>\n    )\n}\n\nexport default Input;","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/coin/Coin.jsx",["308"],"import PropTypes from 'prop-types';\n\nconst Coin = (props) => {\n    return <img className={props.className || \"mr-2\"} src={`https://assets.trustwalletapp.com/blockchains/ethereum/assets/${props.address || \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\" }/logo.png`} height={props.height || 24} />\n}\n\nCoin.propTypes = {\n    className: PropTypes.string,\n    address: PropTypes.string,\n    height: PropTypes.number\n}\n\nexport default Coin;","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/farming/FarmingComponent.jsx",["309","310","311"],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/buttons/ApproveButton.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/dapp-menu/DappMenu.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/farming/SetupComponent.jsx",["312","313","314","315","316","317","318","319","320","321","322","323","324","325"],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/token-input/TokenInput.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/inflation/FixedInflationComponent.jsx",["326","327"],"import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { useState } from 'react';\n\nconst FixedInflationComponent = (props) => {\n    const { className, dfoCore, entry, showButton, hasBorder } = props;\n    const [metadata, setMetadata] = useState(null);\n\n    const getContractMetadata = async () => {\n\n        setMetadata({\n            name: 'XXXXXXXXX',\n            period: 'Weekly',\n            executorReward: '5%',\n            operations: [0, 0, 0],\n            host: '0x0000',\n            contractAddress: '0x0000'\n        });\n    }\n\n    if (!metadata) {\n        getContractMetadata();\n    }\n\n    return (\n        <div className={className}>\n            <div className={`card farming-card ${!hasBorder ? \"no-border\" : \"\"}`}>\n                <div className=\"card-body\">\n                    <div className=\"row px-2 fixed-inflation-main-row\">\n                        {\n                            metadata ? <>\n                            <div className=\"col-12 col-md-6 flex flex-column justify-content-center\">\n                                <div className=\"row mb-2\">\n                                    <h4 className=\"mr-4\"><b>{metadata.name}</b></h4> <b>({metadata.period})</b>\n                                </div>\n                                <div className=\"row\">\n                                    <b style={{fontSize: 14}} className=\"text-secondary mr-1\">Executor reward: 5% </b> <b style={{fontSize: 14, marginBottom: 4}}>for {metadata.operations.length} operations</b> \n                                </div>\n                            </div>\n                            <div className=\"col-12 col-md-6\">\n                                <div className=\"row flex-column align-items-end\">\n                                    <p className=\"fixed-inflation-paragraph\"><b>Host</b>: {metadata.host}</p>\n                                    <p className=\"fixed-inflation-paragraph\"><b>Contract</b>: {metadata.contractAddress}</p>\n                                    { !showButton ? <div/> : <Link to={`/inflation/dapp/${metadata.contractAddress}`} className=\"btn btn-secondary btn-sm\">Open</Link>}\n                                </div>\n                            </div>\n                            </> : <div className=\"col-12 justify-content-center\">\n                                <div className=\"spinner-border text-secondary\" role=\"status\">\n                                    <span className=\"visually-hidden\"></span>\n                                </div>\n                            </div>\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nFixedInflationComponent.propTypes = {\n    className: PropTypes.string,\n    entry: PropTypes.any.isRequired,\n    hasBorder: PropTypes.bool\n};\n\nexport default FixedInflationComponent;","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/shared/header/Header.jsx",["328"],"import { connect } from 'react-redux';\nimport DFOCore from '../../../core';\nimport { setDFOCore, removeDFOCore, setMagicVisualMode, removeMagicVisualMode } from '../../../store/actions';\nimport map from '../../../assets/images/map.svg';\nimport diamond from '../../../assets/images/diamond.svg';\nimport wizardLogo from '../../../assets/images/wizard.svg';\nimport { default as context } from '../../../data/context.json';\nimport { Link } from 'react-router-dom';\nimport { useState } from 'react';\n\nconst Header = (props) => {\n    const [address, setAddress] = useState(null);\n\n    if (props.dfoCore) {\n        props.dfoCore.provider.on('accountsChanged', (accounts) => {\n            setAddress(formatAddress(accounts[0]));\n        })\n    }\n\n    const connectCore = async () => {\n      const core = new DFOCore(context);\n      await core.init();\n      props.setCore(core);\n    }\n    \n    const disconnectCore = () => {\n        props.removeCore();\n    }\n\n    const formatAddress = (address) => {\n        return `${address.substring(0, 5)}...${address.substring(address.length - 4, address.length)}`;\n    }\n\n    return (\n        <nav className=\"navbar navbar-light bg-transparent\">\n            <div className=\"container-fluid\">\n                <Link to={\"/\"} className=\"navbar-brand\">\n                    <img src={wizardLogo} alt=\"\" height={50} />\n                    <span className=\"mx-3\"><b>Covenants</b></span>\n                </Link>\n                <div className=\"d-flex\">\n                    {props.dfoCore && !props.magicMode && <button className=\"btn btn-primary mx-4\" onClick={props.setMagicMode}>Magic</button>}\n                    {props.dfoCore && props.magicMode && <button className=\"btn btn-primary mx-4\" onClick={props.removeMagicMode}>Penguin</button>}\n                    <img src={map} alt=\"\" height={36} />\n                    {\n                        props.dfoCore ? <button className=\"btn btn-primary mx-4\" onClick={() => disconnectCore()}>{formatAddress(props.dfoCore.address)}</button> : <button className=\"btn btn-primary mx-4\" onClick={() => connectCore()}>Connect</button>\n                    }\n                    <img src={diamond} alt=\"\" height={36} />\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    const { core } = state;\n    return { dfoCore: core.dfoCore, magicMode: core.magicMode };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setCore: (dfoCore) => {\n            document.body.className = `${!dfoCore ? 'fantasy' : window.localStorage.magicMode === \"true\" ? 'magic' : 'penguin'}`;\n            dispatch(setDFOCore(dfoCore))\n        },\n        removeCore: () => {\n            document.body.className = \"fantasy\";\n            dispatch(removeDFOCore())\n        },\n        setMagicMode : () => {\n            window.localStorage.setItem(\"magicMode\", true);\n            document.body.className = \"magic\";\n            dispatch(setMagicVisualMode())\n        },\n        removeMagicMode : () => {\n            window.localStorage.removeItem(\"magicMode\", true);\n            document.body.className = \"penguin\";\n            dispatch(removeMagicVisualMode())\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/data/context.json.js",["329","330","331"],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/types/index.js",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/actions/index.js",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/core/index.js",["332"],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/farm/dapp/components/index.js",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/wusd/dapp/components/index.js",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/inflation/dapp/components/index.js",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/farm/dapp/components/Explore.jsx",["333"],"import { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { FarmingComponent } from '../../../../components';\n\nconst Explore = (props) => {\n    const [tokenFilter, setTokenFilter] = useState(\"\");\n    const [farmingContracts, setFarmingContracts] = useState([]);\n    const [startingContracts, setStartingContracts] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (props.dfoCore) {\n            getDeployedContracts();\n        }\n    }, []);\n\n    const getDeployedContracts = async () => {\n        setLoading(true);\n        try {\n            await props.dfoCore.loadDeployedLiquidityMiningContracts();\n            const mappedContracts = await Promise.all(\n                props.dfoCore.deployedLiquidityMiningContracts.map(async (contract) => { \n                    return props.dfoCore.getContract(props.dfoCore.getContextElement('LiquidityMiningABI'), contract.address);\n                })\n            );\n            setFarmingContracts(mappedContracts);\n            setStartingContracts(mappedContracts);\n        } catch (error) {\n            setFarmingContracts([]);\n            setStartingContracts([]);\n        } finally {\n            setLoading(false);\n        }\n    }\n\n    const onChangeTokenFilter = async (value) => {\n        if (!value) {\n            setTokenFilter(\"\");\n            setFarmingContracts(startingContracts);\n            return;\n        }\n        setTokenFilter(value);\n        const filteredFarmingContracts = [];\n        await Promise.all(startingContracts.map(async (contract) => {\n            const rewardTokenAddress = await contract.methods._rewardTokenAddress().call();\n            if (rewardTokenAddress.toLowerCase().includes(value.toLowerCase())) {\n                filteredFarmingContracts.push(contract);\n            }\n        }));\n        setFarmingContracts(filteredFarmingContracts);\n    }\n    \n    if (loading) {\n        return (\n            <div className=\"explore-component\">\n                <div className=\"row\">\n                    <div className=\"col-12 justify-content-center\">\n                        <div className=\"spinner-border text-secondary\" role=\"status\">\n                            <span className=\"visually-hidden\"></span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"explore-component\">\n            <div className=\"row mb-4\">\n                <div className=\"col-12 col-md-6 mb-4 mb-md-0\">\n                    <select className=\"custom-select wusd-pair-select\">\n                        <option value=\"\">Sort by..</option>\n                        <option value=\"1\">One</option>\n                        <option value=\"2\">Two</option>\n                        <option value=\"3\">Three</option>\n                    </select>\n                </div>\n                <div className=\"col-12 col-md-6 mb-4 mb-md-0\">\n                    <input type=\"text\" className=\"form-control token-filter-input\" placeholder=\"Reward token address..\" value={tokenFilter} onChange={(e) => onChangeTokenFilter(e.target.value)} />\n                </div>\n            </div>\n            <div className=\"row\">\n                {\n                    farmingContracts.length === 0 && <div className=\"col-12 text-left\">\n                        <h6><b>No farming contract available!</b></h6>\n                    </div>\n                }\n                {\n                    farmingContracts.length > 0 && farmingContracts.map((farmingContract) => {\n                        return (\n                            <FarmingComponent className=\"col-12 mb-4\" dfoCore={props.dfoCore} contract={farmingContract} hasBorder />\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    const { core } = state;\n    return { dfoCore: core.dfoCore };\n}\n\nexport default connect(mapStateToProps)(Explore);","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/farm/dapp/components/Positions.jsx",["334"],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/farm/dapp/components/ExploreFarmingContract.jsx",["335"],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/farm/dapp/components/Hosted.jsx",["336","337"],"import { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { FarmingComponent } from '../../../../components';\n\nconst contracts = [{address: '0xc3BE549499f1e504c793a6c89371Bd7A98229500'}, {address: '0x761E02FEC5A21C6d3F284bd536dB2D2d33d5540B'}];\n\nconst Hosted = (props) => {\n    const [farmingContracts, setFarmingContracts] = useState([]);\n\n    useEffect(() => {\n        getContracts();\n    }, [])\n\n    const getContracts = async () => {\n        const hostedContracts = props.dfoCore.getHostedLiquidityMiningContracts();\n        const mappedContracts = await Promise.all(\n            hostedContracts.map(async (contract) => { \n                console.log(contract);\n                return props.dfoCore.getContract(props.dfoCore.getContextElement('LiquidityMiningABI'), contract.address);\n            })\n        );\n        console.log(mappedContracts);\n        setFarmingContracts(mappedContracts);\n    }\n\n    return (\n        <div className=\"hosted-component\">\n            <div className=\"row mb-4\">\n                {\n                    farmingContracts.map((farmingContract) => {\n                        return (\n                            <FarmingComponent className=\"col-12 mb-4\" dfoCore={props.dfoCore} contract={farmingContract} hostedBy={true} hasBorder />\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    const { core } = state;\n    return { dfoCore: core.dfoCore };\n}\n\nexport default connect(mapStateToProps)(Hosted);","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/wusd/dapp/components/Farm.jsx",["338","339"],"import { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { FarmingComponent } from '../../../../components'; \n\nconst Farm = (props) => {\n    const [loading, setLoading] = useState(false);\n    const [farmingContracts, setFarmingContracts] = useState([]);\n\n    useEffect(() => {\n        getFarmingSetups();\n    }, []);\n\n    const getFarmingSetups = async () => {\n        setLoading(true);\n        try {\n            await props.dfoCore.loadDeployedLiquidityMiningContracts();\n        } catch (error) {\n            console.error(error);\n        } finally {\n            setLoading(false);\n        }\n    }\n\n    if (loading) {\n        return (\n            <div className=\"explore-component\">\n                <div className=\"row\">\n                    <div className=\"col-12 justify-content-center\">\n                        <div className=\"spinner-border text-secondary\" role=\"status\">\n                            <span className=\"visually-hidden\"></span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"container bg-white dapp-container\">\n            <div className=\"row\">\n                {\n                    farmingContracts.length === 0 && <div className=\"col-12 text-left\">\n                        <h6><b>No farming contract available!</b></h6>\n                    </div>\n                }\n                {\n                    farmingContracts.length > 0 && farmingContracts.map((farmingContract) => {\n                        return (\n                            <FarmingComponent className=\"col-12 mb-4\" dfoCore={props.dfoCore} contract={farmingContract} hasBorder />\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    const { core } = state;\n    return { dfoCore: core.dfoCore };\n}\n\nexport default connect(mapStateToProps)(Farm);","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/wusd/dapp/components/Burn.jsx",["340","341","342","343","344","345","346","347","348","349","350"],"import { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { ApproveButton, Input } from '../../../../components';\nimport { ethers } from 'ethers';\n\nconst abi = new ethers.utils.AbiCoder();\n\nconst Burn = (props) => {\n    const [pair, setPair] = useState(\"\");\n    const [pairs, setPairs] = useState([]);\n    const [getLpToken, setGetLpToken] = useState(false);\n    const [amount, setAmount] = useState(0);\n    const [firstTokenBalance, setFirstTokenBalance] = useState(0);\n    const [secondTokenBalance, setSecondTokenBalance] = useState(0);\n    const [lpTokenBalance, setLpTokenBalance] = useState(0);\n    const [wusdAmount, setWusdAmount] = useState(0);\n    const [wusdContract, setWusdContract] = useState(null);\n    const [wusdBalance, setWusdBalance] = useState(0);\n    const [wusdApproved, setWusdApproved] = useState(false);\n    const [estimatedToken0, setEstimatedToken0] = useState(0);\n    const [estimatedToken1, setEstimatedToken1] = useState(0);\n    const [estimatedLpToken, setEstimatedLpToken] = useState(0);\n    const [wusdExtensionController, setWusdExtensionController] = useState(null);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        getController();\n    }, [])\n\n    const getController = async () => {\n        setLoading(true);\n        try {\n            const contract = await props.dfoCore.getContract(props.dfoCore.getContextElement(\"WUSDExtensionControllerABI\"), props.dfoCore.getContextElement(\"WUSDExtensionControllerAddress\"));\n            console.log(contract);\n            setWusdExtensionController(contract);\n            const allowedAMMS = await contract.methods.allowedAMMs().call();\n            let allowedPairs = [];\n            await Promise.all(allowedAMMS.map(async (allowedAMM, ammIndex) => {\n                const { ammAddress, liquidityPools } = allowedAMM;\n                const pools = [];\n                await Promise.all(liquidityPools.map(async (liquidityPool, lpIndex) => {\n                    const ammContract = await props.dfoCore.getContract(props.dfoCore.getContextElement(\"AMMABI\"), ammAddress);\n                    const poolInfo = await ammContract.methods.byLiquidityPool(liquidityPool).call();\n                    const totalAmount = poolInfo['0'];\n                    const [token0Amount, token1Amount] = poolInfo['1'];\n                    const [token0, token1] = poolInfo['2'];\n                    const token0Contract = await props.dfoCore.getContract(props.dfoCore.getContextElement('ERC20ABI'), token0);\n                    const token1Contract = await props.dfoCore.getContract(props.dfoCore.getContextElement('ERC20ABI'), token1);\n                    const symbol0 = await token0Contract.methods.symbol().call();\n                    const symbol1 = await token1Contract.methods.symbol().call();\n                    const balance0 = await token0Contract.methods.balanceOf(props.dfoCore.address).call();\n                    const token0decimals = await token0Contract.methods.decimals().call();\n                    const balance1 = await token1Contract.methods.balanceOf(props.dfoCore.address).call();\n                    const token1decimals = await token1Contract.methods.decimals().call();\n                    const lpContract = await props.dfoCore.getContract(props.dfoCore.getContextElement('ERC20ABI'), liquidityPool);\n                    const lpSymbol = await lpContract.methods.symbol().call();\n                    const decimalsLp = await lpContract.methods.decimals().call();\n                    const approval = await lpContract.methods.allowance(props.dfoCore.address, props.dfoCore.getContextElement(\"WUSDExtensionControllerAddress\")).call();\n                    setFirstTokenBalance(props.dfoCore.toDecimals(balance0, parseInt(token0decimals)));\n                    setSecondTokenBalance(props.dfoCore.toDecimals(balance1, parseInt(token1decimals)));\n                    pools.push({ ammContract, ammIndex, lpContract, lpIndex, lpSymbol, totalAmount, token0Amount, token1Amount, liquidityPool, token0, token1, symbol0, symbol1, token0decimals, token1decimals, decimalsLp, token0Contract, token1Contract, lpTokenApproved: parseInt(approval) !== 0 });\n                }));\n                allowedPairs = [...allowedPairs, ...pools ];\n            }))\n            const wusdInfo = await contract.methods.wusdInfo().call();  \n            const wusdContract = await props.dfoCore.getContract(props.dfoCore.getContextElement(\"ERC20ABI\"), props.dfoCore.getContextElement(\"WUSDAddress\"));\n            const balance = await wusdContract.methods.balanceOf(props.dfoCore.address).call();\n            const approval = await wusdContract.methods.allowance(props.dfoCore.address, props.dfoCore.getContextElement(\"WUSDExtensionControllerAddress\")).call();\n            setWusdContract(wusdContract);\n            console.log(approval);\n            setWusdApproved(parseInt(approval) !== 0);\n            setWusdBalance(props.dfoCore.toDecimals(balance, await wusdContract.methods.decimals().call()));\n            setPairs(allowedPairs);\n        } catch (error) {\n            console.error(error);\n        } finally {\n            setLoading(false);\n        }\n    }\n\n    const onTokenApproval = (type) => {\n        switch (type) {\n            case 'wusd':\n                setWusdApproved(true);\n            default:\n                setPairs(pairs.map((pair, i) => i === parseInt(type) ? {...pair, lpTokenApproved: true} : pair));\n                return;\n        }\n    }\n\n    const clearTokens = () => {\n        setEstimatedToken0(0);\n        setEstimatedToken1(0);\n        setEstimatedLpToken(0);\n    }\n\n    const onWUSDAmountChange = async (amount) => {\n        setAmount(amount);\n        if (!amount) {\n            clearTokens();\n            return;\n        }\n        if (parseInt(amount) <= 0) {\n            clearTokens();\n            return;\n        }\n        const chosenPair = pairs[pair];\n        const { ammContract, liquidityPool, token0decimals, token1decimals, decimalsLp } = chosenPair;\n        const wusdAmount = props.dfoCore.fromDecimals(amount.toString(), 18);\n\n        const res = await ammContract.methods.byLiquidityPool(liquidityPool).call();\n\n        const liquidityPoolAmount = res[0];\n        const tokensAmounts = res[1];\n        const liquidityPoolTokens = res[2];\n        const updatedSecondTokenAmount = props.dfoCore.normalizeValue(tokensAmounts[1], token1decimals);\n\n        const ratio = tokensAmounts[0] / updatedSecondTokenAmount;\n        const ratio2 = updatedSecondTokenAmount / tokensAmounts[0];\n\n        const wusdRealAmount = (parseInt(wusdAmount) * ratio) / 2;\n\n        const result = await ammContract.methods.byTokenAmount(liquidityPool, liquidityPoolTokens[0], props.dfoCore.toFixed(wusdRealAmount).toString()).call();\n        const [token0, token1] = result.tokensAmounts;\n        const stableCoinOutput = parseInt(token0) + parseInt(token1 * 10**12);\n        const rate = parseInt(wusdAmount) / stableCoinOutput;\n        const lpResult = await ammContract.methods.byTokenAmount(liquidityPool, liquidityPoolTokens[0], props.dfoCore.toFixed(parseInt(token0) * rate).toString()).call();\n\n        setEstimatedToken0(props.dfoCore.toDecimals(props.dfoCore.toFixed(parseInt(token0) * rate), token0decimals));\n        setEstimatedToken1(props.dfoCore.toDecimals(props.dfoCore.toFixed(parseInt(token1) * rate), token1decimals));\n        setEstimatedLpToken(props.dfoCore.toDecimals(lpResult.liquidityPoolAmount, decimalsLp));\n    }\n\n    const burnWUSD = async () => {\n        const info = await wusdExtensionController.methods.wusdInfo().call();\n        const collectionAddress = info['0'];\n        const wusdObjectId = info['1'];\n\n        const wusdCollection = await props.dfoCore.getContract(props.dfoCore.getContextElement('INativeV1ABI'), collectionAddress);\n\n        console.log(props.dfoCore.fromDecimals(estimatedLpToken, 18));\n        const burnData = abi.encode([\"uint256\",\"uint256\",\"uint256\",\"bool\"], [pairs[pair].ammIndex, pairs[pair].lpIndex, props.dfoCore.fromDecimals(estimatedLpToken, 18), !getLpToken])\n        const data = abi.encode([\"uint256\", \"bytes\"], [0, burnData]);\n        console.log(props.dfoCore.fromDecimals(amount, 18).toString());\n        const gasLimit = await wusdCollection.methods.safeBatchTransferFrom(props.dfoCore.address, wusdExtensionController.options.address, [wusdObjectId], [props.dfoCore.fromDecimals(amount, 18).toString()], abi.encode([\"bytes[]\"], [[data]])).estimateGas({ from: props.dfoCore.address});\n        const res = await wusdCollection.methods.safeBatchTransferFrom(props.dfoCore.address, wusdExtensionController.options.address, [wusdObjectId], [props.dfoCore.fromDecimals(amount, 18).toString()], abi.encode([\"bytes[]\"], [[data]])).send({ from: props.dfoCore.address, gasLimit });\n        console.log(res);\n        await getController();\n    }\n\n    const getWUSDToken = () => {\n        return (\n            <div className=\"col-12 mb-4\">\n                <Input showMax={true} value={amount} balance={wusdBalance} min={0} onChange={(e) => onWUSDAmountChange(e.target.value)} address={props.dfoCore.getContextElement(\"WUSDAddress\")} showCoin={true} showBalance={true} name=\"WUSD\" />\n            </div>\n        )\n    }\n\n    const getBurnAmount = () => {\n        if (!pair) {\n            return (<div/>);\n        }\n        \n        if (getLpToken) {\n            return (\n                <div className=\"col-12 mb-4\">\n                    <div className=\"row justify-content-center\">\n                        <b>For</b>\n                    </div>\n                    <div className=\"row justify-content-center\">\n                        { estimatedLpToken } { pairs[pair].symbol0 }/{ pairs[pair].symbol1 }\n                    </div>\n                </div>\n            )\n        }\n        return (\n            <div className=\"col-12 mb-4\">\n                <div className=\"row justify-content-center\">\n                    <b>For</b>\n                </div>\n                <div className=\"row justify-content-center\">\n                    { estimatedToken0 } { pairs[pair].symbol0 } / { estimatedToken1 } { pairs[pair].symbol1 }\n                </div>\n            </div>\n        )\n    }\n\n    const getButtons = () => {\n        console.log(pairs[pair]);\n        return (\n            <div className=\"col-12 mb-4\">\n                <div className=\"row justify-content-center\">\n                    {\n                        !wusdApproved ? <div className=\"col-12 col-md-6\">\n                            <ApproveButton contract={wusdContract} from={props.dfoCore.address} spender={props.dfoCore.getContextElement(\"WUSDExtensionControllerAddress\")} onError={(error) => console.log(error)} onApproval={() => onTokenApproval('wusd')} text={`Approve WUSD`} />\n                        </div> : <div/>\n                    }\n                    {\n                        !pairs[pair].lpTokenApproved ? <div className=\"col-12 col-md-6\">\n                            <ApproveButton contract={pairs[pair].lpContract} from={props.dfoCore.address} spender={props.dfoCore.getContextElement(\"WUSDExtensionControllerAddress\")} onError={(error) => console.log(error)} onApproval={() => onTokenApproval(pair)} text={`Approve ${pairs[pair].lpSymbol}`} />\n                        </div> : <div/>\n                    }\n                    <div className=\"col-12 col-md-6\">\n                        <button onClick={() => burnWUSD()} className=\"btn btn-secondary\">Burn</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    \n    if (loading) {\n        return (\n            <div className=\"explore-component\">\n                <div className=\"row\">\n                    <div className=\"col-12 justify-content-center\">\n                        <div className=\"spinner-border text-secondary\" role=\"status\">\n                            <span className=\"visually-hidden\"></span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"burn-component\">\n            <div className=\"row\">\n                <div className=\"col-12 mb-4\">\n                    <select className=\"custom-select wusd-pair-select\" value={pair} onChange={(e) => setPair(e.target.value)}>\n                        <option value=\"\">Choose pair..</option>\n                        {\n                            pairs.map((pair, index) => {\n                                return <option key={index} value={index}>{pair.symbol0}/{pair.symbol1}</option>\n                            })\n                        }\n                    </select>\n                    <div className=\"form-check mt-4\">\n                        <input className=\"form-check-input\" type=\"checkbox\" value={getLpToken} onChange={(e) => setGetLpToken(e.target.checked)} id=\"getLpToken\" disabled={!pair} />\n                        <label className=\"form-check-label\" htmlFor=\"getLpToken\">\n                            Get liquidity pool token\n                        </label>\n                    </div>\n                </div>\n                {\n                    pair ? getWUSDToken() : <div/>\n                }\n                { getBurnAmount() }\n                {\n                    pair ? getButtons() : <div/>\n                }\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    const { core } = state;\n    return { dfoCore: core.dfoCore };\n}\n\nexport default connect(mapStateToProps)(Burn);","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/farm/dapp/components/Create.jsx",["351","352","353","354","355"],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/wusd/dapp/components/Mint.jsx",["356","357","358","359","360","361","362"],"import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useEffect } from 'react/cjs/react.development';\nimport { ApproveButton, Input } from '../../../../components';\n\nconst Mint = (props) => {\n    const [pair, setPair] = useState(\"\");\n    const [pairs, setPairs] = useState([]);\n    const [useLpToken, setUseLpToken] = useState(false);\n    const [lpTokenAmount, setLpTokenAmount] = useState(0);\n    const [firstAmount, setFirstAmount] = useState(0);\n    const [secondAmount, setSecondAmount] = useState(0);\n    const [firstTokenApproved, setFirstTokenApproved] = useState(false);\n    const [secondTokenApproved, setSecondTokenApproved] = useState(false);\n    const [firstTokenBalance, setFirstTokenBalance] = useState(0);\n    const [secondTokenBalance, setSecondTokenBalance] = useState(0);\n    const [lpTokenBalance, setLpTokenBalance] = useState(0);\n    const [lpTokenApproved, setLpTokenApproved] = useState(false);\n    const [wusdExtensionController, setWusdExtensionController] = useState(null);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        getController();\n    }, [])\n\n    const getController = async () => {\n        setLoading(true);\n        try {\n            const contract = await props.dfoCore.getContract(props.dfoCore.getContextElement(\"WUSDExtensionControllerABI\"), props.dfoCore.getContextElement(\"WUSDExtensionControllerAddress\"));\n            console.log(contract);\n            setWusdExtensionController(contract);\n            const allowedAMMS = await contract.methods.allowedAMMs().call();\n            let allowedPairs = [];\n            await Promise.all(allowedAMMS.map(async (allowedAMM, ammIndex) => {\n                const { ammAddress, liquidityPools } = allowedAMM;\n                const pools = [];\n                await Promise.all(liquidityPools.map(async (liquidityPool, lpIndex) => {\n                    const ammContract = await props.dfoCore.getContract(props.dfoCore.getContextElement(\"AMMABI\"), ammAddress);\n                    const poolInfo = await ammContract.methods.byLiquidityPool(liquidityPool).call();\n                    const totalAmount = poolInfo['0'];\n                    const [token0Amount, token1Amount] = poolInfo['1'];\n                    const [token0, token1] = poolInfo['2'];\n                    const token0Contract = await props.dfoCore.getContract(props.dfoCore.getContextElement('ERC20ABI'), token0);\n                    const token1Contract = await props.dfoCore.getContract(props.dfoCore.getContextElement('ERC20ABI'), token1);\n                    const symbol0 = await token0Contract.methods.symbol().call();\n                    const symbol1 = await token1Contract.methods.symbol().call();\n                    const balance0 = await token0Contract.methods.balanceOf(props.dfoCore.address).call();\n                    const token0decimals = await token0Contract.methods.decimals().call();\n                    const balance1 = await token1Contract.methods.balanceOf(props.dfoCore.address).call();\n                    const token1decimals = await token1Contract.methods.decimals().call();\n                    const lpContract = await props.dfoCore.getContract(props.dfoCore.getContextElement('ERC20ABI'), liquidityPool);\n                    const balanceLp = await lpContract.methods.balanceOf(props.dfoCore.address).call();\n                    const decimalsLp = await lpContract.methods.decimals().call();\n                    setLpTokenBalance(props.dfoCore.toDecimals(balanceLp, parseInt(decimalsLp)));\n                    setFirstTokenBalance(props.dfoCore.toDecimals(balance0, parseInt(token0decimals)));\n                    setSecondTokenBalance(props.dfoCore.toDecimals(balance1, parseInt(token1decimals)));\n                    pools.push({ ammContract, ammIndex, lpIndex, totalAmount, token0Amount, token1Amount, liquidityPool, token0, token1, symbol0, symbol1, token0decimals, token1decimals, decimalsLp, token0Contract, token1Contract });\n                }));\n                allowedPairs = [...allowedPairs, ...pools ];\n            }))\n            setPairs(allowedPairs);\n        } catch (error) {\n            console.error(error);\n        } finally {\n            setLoading(false);\n        }\n    }\n\n    const onTokenApproval = (type) => {\n        switch (type) {\n            case 'first':\n                setFirstTokenApproved(true);\n            case 'second':\n                setSecondTokenApproved(true);\n            case 'lp':\n                setLpTokenApproved(true);\n            default:\n                return;\n        }\n    }\n\n    const setChosenPair = async (pairIndex) => {\n        setPair(pairIndex);\n        if (pairIndex) {\n            const chosenPair = pairs[pairIndex];\n            const allowance0 = await chosenPair.token0Contract.methods.allowance(props.dfoCore.address, props.dfoCore.getContextElement(\"WUSDExtensionControllerAddress\")).call();\n            const allowance1 = await chosenPair.token1Contract.methods.allowance(props.dfoCore.address, props.dfoCore.getContextElement(\"WUSDExtensionControllerAddress\")).call();\n            console.log(allowance0, allowance1);\n            setFirstTokenApproved(parseInt(allowance0) !== 0);\n            setSecondTokenApproved(parseInt(allowance1) !== 0);\n        }\n    }\n\n    const mintWUSD = async () => {\n        setLoading(true);\n        try {\n            if (firstAmount > 0 && secondAmount > 0) {\n                const chosenPair = pairs[pair];\n                const { ammIndex, lpIndex, token0Contract, token1Contract, token0decimals, token1decimals } = chosenPair;\n                await wusdExtensionController.methods.addLiquidity(ammIndex, lpIndex, props.dfoCore.fromDecimals(lpTokenAmount.toString(), 18).toString(), false).send({ from: props.dfoCore.address, gasLimit: 1000000 });\n                const balance0 = await token0Contract.methods.balanceOf(props.dfoCore.address).call();\n                const balance1 = await token1Contract.methods.balanceOf(props.dfoCore.address).call();\n                setFirstTokenBalance(props.dfoCore.toDecimals(balance0, parseInt(token0decimals)));\n                setSecondTokenBalance(props.dfoCore.toDecimals(balance1, parseInt(token1decimals)));\n            } else if (lpTokenAmount > 0) {\n                \n            } else {\n                return;\n            }\n            setFirstAmount(0);\n            setSecondAmount(0);\n            setLpTokenAmount(0);\n        } catch (error) {\n            console.error(error);\n        } finally {\n            setLoading(false);\n        }\n    }\n\n    const updateFirstAmount = async (amount) => {\n        if (!amount) return;\n        setFirstAmount(amount);\n        const chosenPair = pairs[pair];\n        const { ammContract, liquidityPool, token0, token0decimals, token1decimals, decimalsLp } = chosenPair;\n        const amount0 = props.dfoCore.fromDecimals(amount.toString(), token0decimals).toString();\n\n        const res = await ammContract.methods.byTokenAmount(liquidityPool, token0, props.dfoCore.toFixed(amount0)).call();\n        const { tokensAmounts, liquidityPoolAmount } = res;\n\n        const fixedSecondAmount = props.dfoCore.toDecimals(tokensAmounts[1], token1decimals);\n        const fixedLpAmount = props.dfoCore.toDecimals(liquidityPoolAmount, decimalsLp);\n\n        setSecondAmount(fixedSecondAmount);\n        setLpTokenAmount(fixedLpAmount);\n    }\n\n    const updateSecondAmount = async (amount) => {\n        if (!amount) return;\n        setSecondAmount(amount);\n        const chosenPair = pairs[pair];\n        const { ammContract, liquidityPool, token1, token0decimals, token1decimals, decimalsLp } = chosenPair;\n        const amount1 = props.dfoCore.fromDecimals(amount.toString(), token1decimals).toString();\n\n        const res = await ammContract.methods.byTokenAmount(liquidityPool, token1, props.dfoCore.toFixed(amount1)).call();\n\n        const { tokensAmounts, liquidityPoolAmount } = res;\n\n        const fixedFirstAmount = props.dfoCore.toDecimals(tokensAmounts[0], token0decimals);\n        const fixedLpAmount = props.dfoCore.toDecimals(liquidityPoolAmount, decimalsLp);\n\n        setLpTokenAmount(fixedLpAmount);\n        setFirstAmount(fixedFirstAmount);\n    }\n\n    const updateLpAmount = async (amount) => {\n        if (!amount) return;\n        setLpTokenAmount(amount);\n        const chosenPair = pairs[pair];\n        const { ammContract, liquidityPool, token0decimals, token1decimals } = chosenPair;\n        const lpAmount = props.dfoCore.fromDecimals(amount.toString(), 18).toString();\n        const res = await ammContract.methods.byLiquidityPoolAmount(liquidityPool, lpAmount).call();\n        const { tokensAmounts } = res;\n        setFirstAmount(props.dfoCore.toDecimals(tokensAmounts[0], token0decimals));\n        setSecondAmount(props.dfoCore.toDecimals(tokensAmounts[1], token1decimals));\n    }\n\n    const getEstimatedAmount = () => {\n        if (firstAmount != 0 && secondAmount != 0) {\n            return parseFloat(firstAmount) + parseFloat(secondAmount);\n        }\n        return 0;\n    }\n\n    const getLpToken = () => {\n        const chosenPair = pairs[pair];\n\n        return (\n            <div className=\"col-12 mb-4\">\n                <Input showMax={true} step={0.0001} value={lpTokenAmount} balance={lpTokenBalance} min={0} onChange={(e) => updateLpAmount(parseFloat(e.target.value))} showCoin={true} showBalance={true} name={`${chosenPair.symbol0}/${chosenPair.symbol1}`} />\n            </div>\n        )\n    }\n\n    const getMultipleTokens = () => {\n        \n        return (\n            <>\n                <div className=\"col-12 mb-4\">\n                    <Input showMax={true} step={0.0001}  value={firstAmount} address={pairs[pair].token0} balance={firstTokenBalance} min={0} onChange={(e) => updateFirstAmount(parseFloat(e.target.value))} showCoin={true} showBalance={true} name={pairs[pair].symbol0} />\n                </div>\n                <div className=\"col-12 mb-2\">\n                    <p><b>And</b></p>\n                </div>\n                <div className=\"col-12 mb-4\">\n                    <Input showMax={true} step={0.0001}  value={secondAmount} address={pairs[pair].token1} balance={secondTokenBalance} min={0} onChange={(e) => updateSecondAmount(parseFloat(e.target.value))} showCoin={true} showBalance={true} name={pairs[pair].symbol1} />\n                </div>\n            </>\n        )\n    }\n\n    const getButtons = () => {\n        return (\n            <div className=\"col-12 mb-4\">\n                <div className=\"row\">\n                    <div className=\"col-12 col-md-6\">\n                        {\n                            !firstTokenApproved ? \n                                <ApproveButton contract={pairs[pair].token0Contract} from={props.dfoCore.address} spender={props.dfoCore.getContextElement(\"WUSDExtensionControllerAddress\")} onError={(error) => console.log(error)} onApproval={() => onTokenApproval('first')} text={`Approve ${pairs[pair].symbol0}`} />\n                                :\n                                !secondTokenApproved ?\n                                    <ApproveButton contract={pairs[pair].token1Contract} from={props.dfoCore.address} spender={props.dfoCore.getContextElement(\"WUSDExtensionControllerAddress\")} onError={(error) => console.log(error)} onApproval={() => onTokenApproval('second')} text={`Approve ${pairs[pair].symbol1}`} />\n                                : <ApproveButton disabled={true} onError={(error) => console.log(error)} />\n                        }\n                    </div>\n                    <div className=\"col-12 col-md-6\">\n                        <button className=\"btn btn-secondary\" onClick={() => mintWUSD()} disabled={(!firstAmount || !secondAmount) && !lpTokenAmount}>Mint</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    if (loading) {\n        return (\n            <div className=\"mint-component\">\n                <div className=\"row\">\n                    <div className=\"col-12 justify-content-center\">\n                        <div className=\"spinner-border text-secondary\" role=\"status\">\n                            <span className=\"visually-hidden\"></span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"mint-component\">\n            <div className=\"row\">\n                <div className=\"col-12 mb-4\">\n                    <select className=\"custom-select wusd-pair-select\" value={pair} onChange={(e) => setChosenPair(e.target.value)}>\n                        <option value=\"\">Choose pair..</option>\n                        {\n                            pairs.map((pair, index) => {\n                                return <option key={index} value={index}>{pair.symbol0}/{pair.symbol1}</option>\n                            })\n                        }\n                    </select>\n                    <div className=\"form-check mt-4\">\n                        <input className=\"form-check-input\" type=\"checkbox\" value={useLpToken} onChange={(e) => setUseLpToken(e.target.checked)} id=\"useLpToken\" disabled={!pair} />\n                        <label className=\"form-check-label\" htmlFor=\"useLpToken\">\n                            Use liquidity pool token\n                        </label>\n                    </div>\n                </div>\n                {\n                    pair ? useLpToken ? getLpToken() : getMultipleTokens() : <div/>\n                }\n                {\n                    pair ? <div className=\"col-12 mb-4\">\n                        <div className=\"row justify-content-center\">\n                            <b>For</b>\n                        </div>\n                        <div className=\"row justify-content-center\">\n                            { getEstimatedAmount() } WUSD\n                        </div>\n                    </div> : <div/>\n                }\n                {\n                    pair ? getButtons() : <div/>\n                }\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    const { core } = state;\n    return { dfoCore: core.dfoCore };\n}\n\nexport default connect(mapStateToProps)(Mint);","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/wusd/dapp/components/Stats.jsx",["363","364","365","366","367","368","369","370","371","372","373","374"],"import { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ChevronDownIcon, ChevronUpIcon } from '@primer/octicons-react';\n\nconst Stats = (props) => {\n    const [showAdvanced, setShowAdvanced] = useState(false);\n    const [health, setHealth] = useState(100);\n    const [credit, setCredit] = useState(0);\n    const [debit, setDebit] = useState(0);\n    const [loading, setLoading] = useState(false);\n    const [farmTreasury, setFarmTreasury] = useState(0);\n    const [farmReward, setFarmReward] = useState(10);\n    const [newFarmReward, setNewFarmReward] = useState(20);\n    const [unifiTreasury, setUnifiTreasury] = useState(1000.15);\n    const [rebalanceReward, setRebalanceReward] = useState(50);\n    const [currentBlock, setCurrentBlock] = useState(0);\n    const [rebalanceBlock, setRebalanceBlock] = useState(0);\n    const [usdRebalanceByDebit, setUsdRebalanceByDebit] = useState(0);\n    const [selectedUsdn, setSelectedUsdn] = useState(\"\");\n    const [totalSupply, setTotalSupply] = useState(0);\n    const [wusdContract, setWusdContract] = useState(null);\n    const [x2USDContract, setx2USDContract] = useState(null);\n    const [x5USDContract, setx5USDContract] = useState(null);\n    const [x2USDNoteControllerContract, setx2USDNoteControllerContract] = useState(null);\n    const [x5USDNoteControllerContract, setx5USDNoteControllerContract] = useState(null);\n    const [x2USDSupply, setx2USDSupply] = useState(0);\n    const [x2USDTreasury, setx2USDTreasury] = useState(0);\n    const [x5USDSupply, setx5USDSupply] = useState(0);\n    const [x5USDTreasury, setx5USDTreasury] = useState(0);\n    const [wusdExtensionController, setWusdExtensionController] = useState(null);\n    const [collateralData, setCollateralData] = useState([]);\n\n    // TODO add health calc\n    useEffect(() => {\n        getStats();\n    }, []);\n\n    const getStats = async () => {\n        setLoading(true);\n        try {\n            const contract = await props.dfoCore.getContract(props.dfoCore.getContextElement(\"WUSDExtensionControllerABI\"), props.dfoCore.getContextElement(\"WUSDExtensionControllerAddress\"));\n            setWusdExtensionController(contract);\n            const wusdContract = await props.dfoCore.getContract(props.dfoCore.getContextElement(\"ERC20ABI\"), props.dfoCore.getContextElement(\"WUSDAddress\"));\n            setWusdContract(wusdContract);\n            const supply = await wusdContract.methods.totalSupply().call();\n            const decimals = await wusdContract.methods.decimals().call();\n            setTotalSupply(supply);\n            const differences = await contract.methods.differences().call();\n            \n            setCredit(props.dfoCore.toDecimals(differences.credit, decimals));\n            setDebit(props.dfoCore.toDecimals(differences.debt, decimals));\n\n            const wusdNote2Info = await contract.methods.wusdNote2Info().call();\n            const wusdNote5Info = await contract.methods.wusdNote5Info().call();\n            const x2USDcontract = await props.dfoCore.getContract(props.dfoCore.getContextElement(\"IEthItemInteroperableInterfaceABI\"), wusdNote2Info[2]);\n            const x5USDcontract = await props.dfoCore.getContract(props.dfoCore.getContextElement(\"IEthItemInteroperableInterfaceABI\"), wusdNote5Info[2]);\n            const x2USDNoteController = await props.dfoCore.getContract(props.dfoCore.getContextElement(\"WUSDNoteControllerABI\"), wusdNote2Info[3]);\n            const x5USDNoteController = await props.dfoCore.getContract(props.dfoCore.getContextElement(\"WUSDNoteControllerABI\"), wusdNote5Info[3]);\n            \n            setx2USDContract(x2USDcontract);\n            setx2USDContract(x5USDcontract);\n            setx2USDNoteControllerContract(x2USDNoteController);\n            setx5USDNoteControllerContract(x5USDNoteController);\n\n            setx2USDSupply(props.dfoCore.toDecimals(await x2USDcontract.methods.totalSupply().call(), decimals));\n            setx5USDSupply(props.dfoCore.toDecimals(await x5USDcontract.methods.totalSupply().call(), decimals));\n            setx2USDTreasury(props.dfoCore.toDecimals(await wusdContract.methods.balanceOf(x2USDNoteController.options.address).call(), decimals));\n            setx5USDTreasury(props.dfoCore.toDecimals(await wusdContract.methods.balanceOf(x5USDNoteController.options.address).call(), decimals));\n            \n            const info = await contract.methods.rebalanceByCreditReceiversInfo().call();\n            setUnifiTreasury(props.dfoCore.toDecimals(info[2], decimals));\n            const lastRebalanceBlock = await contract.methods.lastRebalanceByCreditBlock().call();\n            const interval = await contract.methods.rebalanceByCreditBlockInterval().call();\n            setCurrentBlock(await props.dfoCore.getBlockNumber());\n            if (lastRebalanceBlock === \"0\") {\n                setRebalanceBlock(await props.dfoCore.getBlockNumber());\n            } else {\n                setRebalanceBlock(parseInt(lastRebalanceBlock) * parseInt(interval));\n            }\n            await getCollateralData(contract, supply);\n        } catch (error) {\n            console.error(error);\n        } finally {\n            setLoading(false);\n        }\n    }\n\n    const getCollateralData = async (contract, supply) => {\n        const ammAggregatorContract = await props.dfoCore.getContract(props.dfoCore.getContextElement('AMMAggregatorABI'), props.dfoCore.getContextElement('ammAggregatorAddress'));\n        const allowedAMMs = await contract.methods.allowedAMMs().call();\n        const data = {\n            collateral: {},\n            liquidity: {},\n            total: 0,\n        };\n        const extensionAddress = await contract.methods.extension().call();\n        await Promise.all(allowedAMMs.map(async (allowedAMM) => {\n            const ammContract = await props.dfoCore.getContract(props.dfoCore.getContextElement('AMMABI'), allowedAMM.ammAddress);\n            const info = await ammContract.methods.info().call();\n            const basePool = { ammAddress: allowedAMM.ammAddress, info: { name: info[0], version: info[1] } };\n            await Promise.all(allowedAMM.liquidityPools.map(async (liquidityPool) => {\n                const balanceOf = await ammAggregatorContract.methods.balanceOf(liquidityPool, extensionAddress).call();\n                \n                await Promise.all(balanceOf['1'].map(async (balance, index) => {\n                    const address = balanceOf['2'][index];\n                    \n                    const currentToken = await props.dfoCore.getContract(props.dfoCore.getContextElement('ERC20ABI'), address);\n                    const symbol = await currentToken.methods.symbol().call();\n                    const decimals = await currentToken.methods.decimals().call();\n                    const value = props.dfoCore.normalizeValue(balance, decimals);\n                    data.total += value;\n                    if (!data.liquidity[basePool.info.name]) {\n                        data.liquidity[basePool.info.name] = value;\n                    } else {\n                        data.liquidity[basePool.info.name] += value;\n                    }\n                    if (!data.collateral[symbol]) {\n                        data.collateral[symbol] = value;\n                    } else {\n                        data.collateral[symbol] += value;\n                    }\n                }))\n            }))\n        }))\n        setCollateralData(data);\n        await getHealth(data, supply);\n    }\n\n    const getHealth = async (data, supply) => {\n        const ratio = data.total / parseInt(supply);\n        setHealth(props.dfoCore.toDecimals(100 * ratio, 0, 2));\n    }\n\n    const rebalanceByCredit = async () => {\n        try {\n            const gasLimit = await wusdExtensionController.methods.rebalanceByCredit().estimateGas({ from: props.dfoCore.address });\n            await wusdExtensionController.methods.rebalanceByCredit().send({ from: props.dfoCore.address, gasLimit });\n            await getStats();\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    const getHealthBarStatus = () => {\n        return {\n            border: `1px ${health > 90 ? \"#1abc9c\" : health > 50 ? \"#f1c40f\" : \"#e74c3c\"} solid`,\n            background: `linear-gradient(90deg, ${health > 90 ? \"#1abc9c\" : health > 50 ? \"#f1c40f\" : \"#e74c3c\"} 65%, #fff 35%)`\n        }\n    }\n\n    const getFirstCol = () => {\n        return (\n            <div className=\"col-3 text-left\">\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <p><b>uSD: $1</b></p>\n                    </div>\n                </div>\n                <hr />\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <div className=\"row mb-3\">\n                            <div className=\"col-12\">\n                                <b>Supply</b>\n                            </div>\n                            <div className=\"col-12\" style={{wordBreak: 'break-word'}}>\n                                { totalSupply ? props.dfoCore.toDecimals(props.dfoCore.toFixed(totalSupply), 18) : totalSupply } WUSD\n                            </div>\n                        </div>\n                        <div className=\"row mb-3\">\n                            <div className=\"col-12\">\n                                <b>Collateral</b>\n                            </div>\n                            <div className=\"col-12\">\n                                {\n                                    (collateralData && collateralData.collateral) ?\n                                        Object.entries(collateralData.collateral).map((entry, i) => {\n                                            return <p>{props.dfoCore.toDecimals(props.dfoCore.toFixed(entry[1]).toString())} {entry[0]}</p>\n                                        })\n                                    : <div/>\n                                }\n                            </div>\n                        </div>\n                        <div className=\"row mb-3\">\n                            <div className=\"col-12\">\n                                <b>Liquidity</b>\n                            </div>\n                            <div className=\"col-12\">\n                                {\n                                    (collateralData && collateralData.liquidity) ?\n                                        Object.entries(collateralData.liquidity).map((entry, i) => {\n                                            return <p>{entry[0]}: {(entry[1]/collateralData.total) * 100}%</p>\n                                        })\n                                    : <div/>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    const getSecondCol = () => {\n        return (\n            <div className=\"col-9 text-left\">\n                <div className=\"row mb-4\">\n                    <div className=\"col-12 health-bar\" style={getHealthBarStatus()}>\n                        Health: {health}%\n                    </div>\n                </div>\n                <div className=\"my-4\" />\n                <div className=\"row mb-4\">\n                    <div className=\"col-6\">\n                        <b>Credit</b>\n                        <br/>\n                        {credit} uSD\n                    </div>\n                    <div className=\"col-6\">\n                        <b>Debit</b>\n                        <br/>\n                        {debit} uSD\n                    </div>\n                </div>\n                <div className=\"row mb-4\">\n                    <div className=\"col-6\">\n                        <b>x2USD supply</b>\n                        <br/>\n                        {x2USDSupply}\n                    </div>\n                    <div className=\"col-6\">\n                        <b>x2USD treasury</b>\n                        <br/>\n                        {x2USDTreasury}\n                    </div>\n                </div>\n                <div className=\"row mb-4\">\n                    <div className=\"col-6\">\n                        <b>x5USD supply</b>\n                        <br/>\n                        {x5USDSupply}\n                    </div>\n                    <div className=\"col-6\">\n                        <b>x5USD treasury</b>\n                        <br/>\n                        {x5USDTreasury}\n                    </div>\n                </div>\n                <div className=\"row mb-4\">\n                    <div className=\"col-6\">\n                        <b>Farm treasury</b>\n                        <br/>\n                        {farmTreasury} uSD\n                    </div>\n                    <div className=\"col-6\">\n                        <b>Farm reward</b>\n                        <br/>\n                        {farmReward} uSD per block\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    const getAdvancedCol = () => {\n        return (\n            <div className=\"col-12\">\n                <div className=\"row flex justify-content-center\">\n                    <p onClick={() => setShowAdvanced(!showAdvanced)} className=\"text-secondary wusd-stats-advanced\">Advanced {showAdvanced ? <ChevronDownIcon /> : <ChevronUpIcon /> }</p>\n                </div>\n                {\n                    showAdvanced ? \n                    <>\n                        <div className=\"container\">\n                            { getAdvancedRow() }\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <div className=\"row mb-2\">\n                                        <div className=\"col-12\">\n                                            <b>Farm Reward rebalance</b>\n                                            <br/>\n                                            next reward: {newFarmReward} uSD per block\n                                        </div>\n                                    </div>\n                                    <div className=\"row justify-content-center\">\n                                        <button className=\"btn btn-outline-secondary\">Rebalance</button>\n                                    </div>\n                                </div>\n                            </div>   \n                        </div>\n                    </> : <div/>\n                }\n            </div>\n        )\n    } \n\n    const getAdvancedRow = () => {\n        if (credit > debit) {\n            return (\n                <>\n                    <div className=\"row mb-4\">\n                        <div className=\"col-6 text-left\">\n                            <b>Available credit</b>\n                            <br/>\n                            {farmTreasury} uSD Farm treasury\n                            <br/>\n                            {x2USDTreasury + x5USDTreasury} uSDN treasury\n                            <br/>\n                            {unifiTreasury} Unifi treasury\n                            <br/>\n                            {parseFloat(credit) - parseFloat(unifiTreasury) - parseFloat(x2USDTreasury) - parseFloat(x5USDTreasury) - parseFloat(farmTreasury)} uSD rebalance reward\n                        </div>\n                        <div className=\"col-6\">\n                            {\n                                rebalanceBlock <= currentBlock ? <>\n                                    <div className=\"row mb-2\">\n                                        <div className=\"col-12\">\n                                            <b>Rebalance by credit</b>\n                                            <br/>\n                                            Rebalance block: #{rebalanceBlock}\n                                        </div>\n                                    </div>\n                                    <div className=\"row justify-content-center mb-2\">\n                                        <button className=\"btn btn-outline-secondary\" onClick={() => rebalanceByCredit()} disabled={rebalanceBlock > currentBlock}>Rebalance</button>\n                                    </div>\n                                    <div className=\"row justify-content-center\">\n                                       Reward: {credit * (2/100)}\n                                    </div>\n                                </> : <div className=\"row mb-2\">\n                                    <div className=\"col-12\">\n                                        <b>Rebalance by credit</b>\n                                        <br/>\n                                        Next rebalance block: #{rebalanceBlock}\n                                    </div>\n                                </div>\n                                \n                            }\n                            \n                        </div>\n                    </div>    \n                    <hr/>\n                </>\n            );\n        } else if (debit < credit) {\n            return (\n                <>\n                <div className=\"row mb-4\">\n                    <div className=\"col-6 text-left\">\n                        <b>Rebalance by debit</b>\n                        <div className=\"input-group mt-4\">\n                            <div className=\"input-group-prepend\">\n                                <button className=\"btn btn-secondary\" type=\"button\">MAX</button>\n                            </div>\n                            <input type=\"number\" className=\"form-control\" value={usdRebalanceByDebit} min={0} onChange={(e) => setUsdRebalanceByDebit(parseFloat(e.target.value))} />\n                            <div className=\"input-group-append\">\n                                <span className=\"input-group-text\" id=\"\"> uSD</span>\n                            </div>\n                        </div>\n                        <small className=\"form-text text-muted\">Balance: 0 uSD</small>\n                    </div>\n                    <div className=\"col-6\">\n                        <div className=\"row mb-2\">\n                            <div className=\"col-12\">\n                                <select className=\"custom-select wusd-pair-select\" value={selectedUsdn} onChange={(e) => setSelectedUsdn(e.target.value)}>\n                                    <option value=\"\">Choose uSD..</option>\n                                    <option value=\"x2\">x2USD</option>\n                                    <option value=\"x5\">x5USD</option>\n                                </select>\n                                {\n                                    selectedUsdn ? \n                                    <div className=\"mt-2\">\n                                        For\n                                        <br/>\n                                        { selectedUsdn === 'x2' ? \"700 x2USD\" : \"500 x5USD\"}\n                                    </div> : <div/>\n                                }\n                                \n                            </div>\n                        </div>\n                        {\n                            selectedUsdn ? \n                            <div className=\"row justify-content-center\">\n                                <button className=\"btn btn-outline-secondary\" disabled={usdRebalanceByDebit === 0}>Rebalance</button>\n                            </div> : <div/>\n                        }\n                    </div>\n                </div>   \n                <hr/>\n                </>\n            );\n        } else {\n            return <div/>\n        }\n    }\n\n    if (loading) {\n        return (\n            <div className=\"col-12 justify-content-center\">\n                <div className=\"spinner-border text-secondary\" role=\"status\">\n                    <span className=\"visually-hidden\"></span>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"stats-container\">\n            <div className=\"row\">\n                { getFirstCol() }\n                { getSecondCol() }\n            </div>\n            <hr />\n            <div className=\"row\">\n                { getAdvancedCol() }\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    const { core } = state;\n    return { dfoCore: core.dfoCore };\n}\n\nexport default connect(mapStateToProps)(Stats);","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/wusd/dapp/components/USDN.jsx",["375","376","377","378","379","380","381","382","383"],"import { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ApproveButton, Input } from '../../../../components';\n\nconst USDN = (props) => {\n    const [x2Amount, setx2Amount] = useState(0);\n    const [x5Amount, setx5Amount] = useState(0);\n    const [wusdContract, setWusdContract] = useState(null);\n    const [x2USDContract, setx2USDContract] = useState(null);\n    const [x5USDContract, setx5USDContract] = useState(null);\n    const [x2USDNoteControllerContract, setx2USDNoteControllerContract] = useState(null);\n    const [x5USDNoteControllerContract, setx5USDNoteControllerContract] = useState(null);\n    const [wusdExtensionController, setWusdExtensionController] = useState(null);\n    const [x2Balance, setx2Balance] = useState(0);\n    const [x5Balance, setx5Balance] = useState(0);\n    const [x2Approved, setx2Approved] = useState(false);\n    const [x5Approved, setx5Approved] = useState(false);\n    const [x2USDSupply, setx2USDSupply] = useState(0);\n    const [x2USDTreasury, setx2USDTreasury] = useState(0);\n    const [x5USDSupply, setx5USDSupply] = useState(0);\n    const [x5USDTreasury, setx5USDTreasury] = useState(0);\n    const [x2USDNoteInfo, setx2USDNoteInfo] = useState(null);\n    const [x5USDNoteInfo, setx5USDNoteInfo] = useState(null);\n\n    useEffect(() => {\n        getData();\n    }, []);\n\n    const getData = async () => {\n        const contract = await props.dfoCore.getContract(props.dfoCore.getContextElement(\"WUSDExtensionControllerABI\"), props.dfoCore.getContextElement(\"WUSDExtensionControllerAddress\"));\n        setWusdExtensionController(contract);\n\n        const wusdContract = await props.dfoCore.getContract(props.dfoCore.getContextElement(\"ERC20ABI\"), props.dfoCore.getContextElement(\"WUSDAddress\"));\n        setWusdContract(wusdContract);\n        const decimals = await wusdContract.methods.decimals().call();\n\n        const wusdNote2Info = await contract.methods.wusdNote2Info().call();\n        const wusdNote5Info = await contract.methods.wusdNote5Info().call();\n        setx2USDNoteInfo(wusdNote2Info);\n        setx2USDNoteInfo(wusdNote5Info);\n\n        const x2USDcontract = await props.dfoCore.getContract(props.dfoCore.getContextElement(\"ERC20ABI\"), wusdNote2Info[2]);\n        const x5USDcontract = await props.dfoCore.getContract(props.dfoCore.getContextElement(\"ERC20ABI\"), wusdNote5Info[2]);\n        const x2USDNoteController = await props.dfoCore.getContract(props.dfoCore.getContextElement(\"WUSDNoteControllerABI\"), wusdNote2Info[3]);\n        const x5USDNoteController = await props.dfoCore.getContract(props.dfoCore.getContextElement(\"WUSDNoteControllerABI\"), wusdNote5Info[3]);\n        \n        setx2USDContract(x2USDcontract);\n        setx2USDContract(x5USDcontract);\n        setx2USDNoteControllerContract(x2USDNoteController);\n        setx5USDNoteControllerContract(x5USDNoteController);\n\n        setx2USDSupply(props.dfoCore.toDecimals(await x2USDcontract.methods.totalSupply().call(), decimals));\n        setx5USDSupply(props.dfoCore.toDecimals(await x5USDcontract.methods.totalSupply().call(), decimals));\n        setx2USDTreasury(props.dfoCore.toDecimals(await wusdContract.methods.balanceOf(x2USDNoteController.options.address).call(), decimals));\n        setx5USDTreasury(props.dfoCore.toDecimals(await wusdContract.methods.balanceOf(x5USDNoteController.options.address).call(), decimals));\n\n        const x2balance = await x2USDcontract.methods.balanceOf(props.dfoCore.address).call();\n        const x5balance = await x5USDcontract.methods.balanceOf(props.dfoCore.address).call();\n        setx2Balance(x2balance);\n        setx5Balance(x5balance);\n\n        const allowance0 = await x2USDcontract.methods.allowance(props.dfoCore.address, props.dfoCore.getContextElement(\"WUSDExtensionControllerAddress\")).call();\n        const allowance1 = await x5USDcontract.methods.allowance(props.dfoCore.address, props.dfoCore.getContextElement(\"WUSDExtensionControllerAddress\")).call();\n \n        setx2Approved(parseInt(allowance0) !== 0);\n        setx5Approved(parseInt(allowance1) !== 0);\n    }\n\n    const redeemX2 = async () => {\n        if (x2Amount > x2USDTreasury) return;\n        const x2USDCollection = await props.dfoCore.getContract(props.dfoCore.getContextElement('INativeV1ABI'), x2USDNoteInfo['0']);\n        console.log(x2USDCollection);\n        await x2USDCollection.methods.safeBatchTransferFrom(props.dfoCore.address, x2USDNoteControllerContract.options.address, [x2USDNoteInfo['1']], [props.dfoCore.fromDecimals(x2Amount, 18).toString()], \"\");\n        await getData();\n    }\n\n    const redeemX5 = async () => {\n        if (x5Amount > x5USDTreasury) return;\n        const x5USDCollection = await props.dfoCore.getContract(props.dfoCore.getContextElement('INativeV1ABI'), x2USDNoteInfo['0']);\n        await x5USDCollection.methods.safeBatchTransferFrom(props.dfoCore.address, x5USDNoteControllerContract.options.address, [x5USDNoteInfo['1']], [props.dfoCore.fromDecimals(x5Amount, 18).toString()], \"\");\n        await getData();\n    }\n\n    const onTokenApproval = (type) => {\n        switch (type) {\n            case 'x2':\n                setx2Approved(true);\n            case 'x5':\n                setx5Approved(true);\n            default:\n                return;\n        }\n    }\n\n    const getx2Input = () => {\n        return (\n            <>\n            <div className=\"col-12 mb-4\">\n                <Input showMax={true} value={x2Amount} balance={x2Balance} extra={`| Treasury ${x2USDTreasury} WUSD`} min={0} onChange={(e) => setx2Amount(e.target.value)} showCoin={true} showBalance={true} name=\"x2USD\" />\n            </div>\n            {\n                x2Amount ? \n                <div className=\"col-12 mb-4\">\n                    <div className=\"row justify-content-center\">\n                        For\n                    </div>\n                    <div className=\"row justify-content-center\">\n                        700 uSD\n                    </div>\n                </div> : <div/>\n            }\n            </>\n        )\n    }\n\n    const getx2Buttons = () => {\n        return (\n            <div className=\"col-12 mb-4\">\n                <div className=\"row\">\n                    {\n                        !x2Approved ? \n                        <div className=\"col\">\n                            <ApproveButton contract={x2USDContract} isERC1155={true} from={props.dfoCore.address} spender={props.dfoCore.getContextElement(\"WUSDExtensionControllerAddress\")}  onError={(error) => console.log(error)} onApproval={() => onTokenApproval('x2')} text={\"Approve x2USD\"} />\n                        </div> : <></>\n                    }\n                    <div className=\"col\">\n                        <button onClick={() => redeemX2()} className=\"btn btn-secondary\">Redeem</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    const getx5Input = () => {\n        return (\n            <>\n                <div className=\"col-12 mb-4\">\n                    <Input showMax={true} value={x5Amount} balance={x5Balance} extra={`| Treasury ${x5USDTreasury} WUSD`} min={0} onChange={(e) => setx5Amount(e.target.value)} showCoin={true} showBalance={true} name=\"x5USD\" />\n                </div>\n                {\n                    x5Amount ?\n                    <div className=\"col-12 mb-4\">\n                        <div className=\"row justify-content-center\">\n                            For\n                        </div>\n                        <div className=\"row justify-content-center\">\n                            700 uSD\n                        </div>\n                    </div> : <div/>\n                }\n            </>\n        )\n    }\n\n    const getx5Buttons = () => {\n        return (\n            <div className=\"col-12 mb-4\">\n                <div className=\"row\">\n                    {\n                        !x5Approved ? \n                        <div className=\"col\">\n                            <ApproveButton contract={x5USDContract} isERC1155={true} from={props.dfoCore.address} spender={props.dfoCore.getContextElement(\"WUSDExtensionControllerAddress\")}  onError={(error) => console.log(error)} onApproval={() => onTokenApproval('x5')} text={\"Approve x5USD\"} />\n                        </div> : <></>\n                    }\n                    <div className=\"col-12 col-md-6\">\n                        <button onClick={() => redeemX5()} className=\"btn btn-secondary\">Redeem</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"usdn-component\">\n            <div className=\"row\">\n                { getx2Input() }\n                { getx2Buttons() }\n                <div className=\"col-12 my-4\" />\n                { getx5Input() }\n                { getx5Buttons() }\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    const { core } = state;\n    return { dfoCore: core.dfoCore };\n}\n\nexport default connect(mapStateToProps)(USDN);","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/inflation/dapp/components/Create.jsx",["384"],"import { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { setInflationContractStep, updateInflationContract, addEntry, removeEntry, addInflationSetup, removeInflationSetup  } from '../../../../store/actions';\nimport CreateSetup from './CreateSetup';\n\nconst Create = (props) => {\n    const [step, setStep] = useState(0);\n    const [add, setAdd] = useState(false);\n    const [editSetup, setEditSetup] = useState(null);\n    const [selectedHost, setSelectedHost] = useState(\"\");\n\n    const addSetup = (setup) => {\n        if (editSetup) {\n            props.removeInflationSetup(setup.index);\n        }\n        props.addInflationSetup(setup);\n        setAdd(false);\n        setEditSetup(null);\n    }\n\n    const removeSetup = (index) => {\n        props.removeInflationSetup(index);\n    }\n\n    const getSteps = () => {\n        switch (step) {\n            case 0:\n                return getFirstStep();\n            case 1:\n                return getSecondStep();\n            default:\n                return <div/>\n        }\n    }\n\n    const getFirstStep = () => {\n        if (add || editSetup) {\n            return <div className=\"create-inflation-component\">\n                <div className=\"row mb-4\">\n                    <CreateSetup onCancel={() => { setAdd(false); setEditSetup(null); }} onFinish={(setup) => addSetup(setup)} setup={editSetup} />\n                </div>\n            </div>;\n        }\n    \n        return (\n            <div className=\"create-inflation-component\">\n                <div className=\"row mb-4\">\n                    { props.inflationSetups.length === 0 && <CreateSetup onFinish={(setup) => addSetup(setup)} /> }\n                    { props.inflationSetups.length > 0 && listSetups() }\n                </div>\n            </div>\n        );\n    }\n\n    const listSetups = () => {\n        return <div className=\"col-12 p-0\">\n            <div className=\"row flex-column align-items-start mb-4\">\n                <h6 className=\"text-secondary\"><b>Setup inflation contract</b></h6>\n                <p><b>Entry list</b></p>\n            </div>\n            {\n                props.inflationSetups.map((setup, i) => {\n                    return (\n                        <div key={i} className=\"row align-items-center text-left mb-md-2 mb-4\">\n                            <div className=\"col-md-9 col-12\">\n                                <b style={{fontSize: 14}}>{setup.title} ({setup.recurringExecution})</b>\n                            </div>\n                            <div className=\"col-md-3 col-12 flex\">\n                                <button className=\"btn btn-sm btn-outline-danger mr-1\" onClick={() => removeSetup(i)}><b>X</b></button> <button onClick={() => setEditSetup({ ...setup, index: i })} className=\"btn btn-sm btn-danger ml-1\"><b>EDIT</b></button>\n                            </div>\n                        </div>\n                    )\n                })\n            }\n            <div className=\"row justify-content-between mt-4\">\n                <div className=\"col-12 flex justify-content-start mb-4\">\n                    <button onClick={() => setAdd(true)} className=\"btn btn-light\">Add entry</button>\n                </div>\n                <div className=\"col-12 mt-4\">\n                    <button onClick={() => {\n                        props.inflationSetups.forEach((_, i) => props.removeInflationSetup(i));\n                    }} className=\"btn btn-light mr-4\">Cancel</button> <button onClick={() => setStep(step + 1)} className=\"btn btn-secondary ml-4\">Next</button>\n                </div>\n            </div>\n        </div>\n    }\n\n    const getSecondStep = () => {\n        return <div className=\"col-12 p-0\">\n            <div className=\"row flex-column align-items-start mb-4\">\n                <h6 className=\"text-secondary\"><b>Setup inflation contract</b></h6>\n                <p><b>Deploy</b></p>\n            </div>\n            <div className=\"row\">\n                <h6><b>Host</b></h6>\n            </div>\n            <div className=\"row mb-2\">\n                <p className=\"text-left text-small\">Lorem, ipsum dolor sit amet consectetur adipisicing elit. Omnis delectus incidunt laudantium distinctio velit reprehenderit quaerat, deserunt sint fugit ex consectetur voluptas suscipit numquam. Officiis maiores quaerat quod necessitatibus perspiciatis!</p>\n            </div>\n            <div className=\"row mb-4\">\n                <div className=\"col-12 p-0\">\n                    <select className=\"custom-select wusd-pair-select\" value={selectedHost} onChange={(e) => setSelectedHost(e.target.value)}>\n                        <option value=\"\">Choose an host..</option>\n                        <option value=\"deployed-contract\">Deployed Contract</option>\n                        <option value=\"deploy-contract\">Deploy Contract</option>\n                        <option value=\"wallet\">Wallet</option>\n                    </select>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12 mt-4\">\n                    <button onClick={() => {\n                        setStep(step - 1);\n                    }} className=\"btn btn-light mr-4\">Cancel</button> <button onClick={() => console.log('deploy')} className=\"btn btn-secondary ml-4\">Deploy</button>\n                </div>\n            </div>\n        </div>\n    }\n\n    return getSteps();\n}\n\nconst mapStateToProps = (state) => {\n    const { core, session } = state;\n    const { inflationContract, inflationSetups, entries, inflationCreationStep } = session;\n    return { dfoCore: core.dfoCore, inflationSetups, inflationContract, entries, inflationCreationStep };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setInflationContractStep: (index) => dispatch(setInflationContractStep(index)),\n        updateInflationContract: (contract) => dispatch(updateInflationContract(contract)),\n        addInflationSetup: (setup) => dispatch(addInflationSetup(setup)),\n        removeInflationSetup: (index) => dispatch(removeInflationSetup(index)),\n        addEntry: (entry) => dispatch(addEntry(entry)), \n        removeEntry: (index) => dispatch(removeEntry(index)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Create);","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/inflation/dapp/components/Explore.jsx",["385","386","387"],"import { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { FixedInflationComponent, FarmingComponent } from '../../../../components';\n\nconst extFixedInflationContracts = [{address: '0xc3BE549499f1e504c793a6c89371Bd7A98229500'}, {address: '0x761E02FEC5A21C6d3F284bd536dB2D2d33d5540B'}];\n\nconst Explore = (props) => {\n    const [executable, setExecutable] = useState(false);\n    const [fixedInflationContracts, setFixedInflationContracts] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (props.dfoCore) {\n            getEntries();\n        }\n    }, []);\n\n    const getEntries = async () => {\n        setLoading(true);\n        try {\n            setFixedInflationContracts(extFixedInflationContracts);\n        } catch (error) {\n            console.error(error);\n            setFixedInflationContracts([]);\n        } finally {\n            setLoading(false);\n        }\n    }\n\n    return (\n        <div className=\"explore-component\">\n            <div className=\"row mb-4 align-items-center\">\n                <div className=\"col-12 col-md-6 mb-4 mb-md-0\">\n                    <select className=\"custom-select wusd-pair-select\">\n                        <option value=\"\">Sort by..</option>\n                        <option value=\"1\">One</option>\n                        <option value=\"2\">Two</option>\n                        <option value=\"3\">Three</option>\n                    </select>\n                </div>\n                <div className=\"col-12 col-md-6 mb-4 mb-md-0\">\n                    <div className=\"form-check my-4\">\n                        <input className=\"form-check-input\" type=\"checkbox\" value={executable} onChange={(e) => setExecutable(e.target.checked)} id=\"setExecutable\" />\n                        <label className=\"form-check-label\" htmlFor=\"setExecutable\">\n                            Executable\n                        </label>\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                {\n                    fixedInflationContracts.length === 0 && <div className=\"col-12 text-left\">\n                        <h6><b>No fixed inflation contracts!</b></h6>\n                    </div>\n                }\n                {\n                    fixedInflationContracts.map((entry) => {\n                        return (\n                            <FixedInflationComponent className={\"col-12 mb-4\"} showButton={true} hasBorder={true} />\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    const { core } = state;\n    return { dfoCore: core.dfoCore };\n}\n\nexport default connect(mapStateToProps)(Explore);","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/wusd/dapp/components/Arbitrate.jsx",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/inflation/dapp/components/ExploreInflationContract.jsx",["388","389","390","391"],"import { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { FixedInflationComponent } from '../../../../components';\n\nconst ExploreInflationContract = (props) => {\n    const [loading, setLoading] = useState(false);\n    const [entries, setEntries] = useState([]);\n\n    return (\n        <div className=\"explore-inflation-component\">\n            <div className=\"row mb-4 align-items-center\">\n                <FixedInflationComponent className={\"col-12 mb-4\"} showButton={false} hasBorder={false} />\n            </div>\n            <div className=\"row\">\n                {\n                    entries.length === 0 && <div className=\"col-12 text-left\">\n                        <h6><b>No entries available!</b></h6>\n                    </div>\n                }\n                {\n                    entries.map((entry) => {\n                        return (\n                           <div/>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    const { core } = state;\n    return { dfoCore: core.dfoCore };\n}\n\nexport default connect(mapStateToProps)(ExploreInflationContract);","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/types/session/index.js",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/types/core/index.js",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/actions/session/index.js",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/store/actions/core/index.js",[],"/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/inflation/dapp/components/CreateSetup.jsx",["392","393"],"import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useEffect } from 'react/cjs/react.development';\nimport { Input } from '../../../../components';\nimport { addInflationSetup, removeEntry, removeInflationSetup  } from '../../../../store/actions';\nimport CreateEntry from './CreateEntry';\n\nconst CreateSetup = (props) => {\n    const { onFinish, onCancel, editSetup } = props;\n    // first step\n    const [title, setTitle] = useState(\"\");\n    const [recurringExecution, setRecurringExecution] = useState(\"\");\n    // second step\n    const [setup, setSetup] = useState({});\n    // third step\n    const [hasExecutionReward, setHasExecutionReward] = useState(false);\n    const [executionRewardAmount, setExecutionRewardAmount] = useState(0);\n    // general\n    const [step, setStep] = useState(0);\n    const [loading, setLoading] = useState(false);\n    const [add, setAdd] = useState(false);\n    const [editEntry, setEditEntry] = useState(null);\n\n    // general methods\n    useEffect(() => {\n        if (editSetup) {\n            setTitle(editSetup.title);\n            setRecurringExecution(editSetup.recurringExecution);\n            setSetup(editSetup);\n            setHasExecutionReward(editSetup.hasExecutionReward);\n            setExecutionRewardAmount(editSetup.executionRewardAmount);\n        }\n    })\n\n    const getSetup = () => {\n        return {\n            ...setup,\n            hasExecutionReward,\n            executionRewardAmount,\n        }\n    }\n\n    // first step methods\n    const finishFirstStep = () => {\n        setLoading(true);\n        setSetup({ title, recurringExecution, entries: [] });\n        setStep(1);\n        setLoading(false);\n    }\n\n    // second step methods\n    const addInflationEntry = (entry) => {\n        if (editEntry) {\n            setSetup({\n                ...setup,\n                entries: setup.entries.map((e, i) => i === editEntry.index ? entry : e),\n            })\n        } else {\n            setSetup({\n                ...setup,\n                entries: setup.entries.concat(entry),\n            });\n        }\n        setAdd(false);\n        setEditEntry(null);\n    }\n\n    const removeEntry = (index) => {\n        setSetup({\n            ...setup,\n            entries: setup.entries.filter((_, i) => i !== index),\n        })\n    }\n\n    // third step methods\n\n\n    // step retrieval methods\n    const getStep = () => {\n        switch (step) {\n            case 0:\n                return getFirstStep();\n            case 1:\n                return getSecondStep();\n            case 2:\n                return getThirdStep();\n            default:\n                return getFirstStep();\n        }\n    }\n\n    const getFirstStep = () => {\n        return <div className=\"col-12\">\n            <div className=\"row mb-4\">\n                <h6 className=\"text-secondary\"><b>Setup inflation contract</b></h6>\n            </div>\n            <div className=\"row justify-content-center mb-4\">\n                <div className=\"col-12 col-md-6 flex flex-column align-items-center\">\n                    <div className=\"row mb-2 justify-content-center\">\n                        <h4><b>Create setup</b></h4>\n                    </div>\n                    <div className=\"row\">\n                        <p style={{fontSize: 12}}>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quaerat animi ipsam nemo at nobis odit temporibus autem possimus quae vel, ratione numquam modi rem accusamus, veniam neque voluptates necessitatibus enim!</p>\n                    </div>\n                    <div className=\"row justify-content-center mb-4\">\n                        <input type=\"text\" className=\"form-control inflation-name-input\" placeholder=\"Name\" value={title} onChange={(e) => setTitle(e.target.value)} />\n                    </div>\n                    <div className=\"row justify-content-center\">\n                        <h6><b>Recurring execution</b></h6>\n                        <p style={{fontSize: 12}}>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quaerat animi ipsam nemo at nobis odit temporibus autem possimus quae vel, ratione numquam modi rem accusamus, veniam neque voluptates necessitatibus enim!</p>\n                    </div>\n                    <div className=\"row w-100 mb-4\">\n                        <select value={recurringExecution} onChange={(e) => setRecurringExecution(e.target.value)} className=\"custom-select wusd-pair-select\">\n                            <option value=\"\">Select one</option>\n                            <option value=\"daily\">Daily</option>\n                            <option value=\"monthly\">Monthly</option>\n                            <option value=\"yearly\">Yearly</option>\n                        </select>\n                    </div>\n                    <div className=\"row\">\n                        { onCancel ? <button onClick={() => onCancel()} className=\"btn btn-light mr-4\">Cancel</button> : <></> }\n                        <button onClick={() => finishFirstStep()} disabled={!title || !recurringExecution} className=\"btn btn-secondary ml-4\">Create</button>\n                    </div>\n                </div>\n            </div>\n        </div>;\n    }\n\n    const getSecondStep = () => {\n        if (add || editEntry) {\n            return <CreateEntry onCancel={() => { setAdd(false); setEditEntry(null); }} onFinish={(entry) => addInflationEntry(entry)} entry={editEntry} setup={setup} />;\n        }\n        return (\n            setup.entries.length === 0 ? <CreateEntry onCancel={() => setStep(0)} onFinish={(entry) => addInflationEntry(entry)} setup={setup} /> : listSetupEntries()\n        )\n    }\n\n    const getThirdStep = () => {\n        return (<div className=\"col-12 p-0\">\n            <div className=\"row flex-column align-items-start mb-4\">\n                <h6 className=\"text-secondary\"><b>Setup inflation contract</b></h6>\n                <p><b>{ title } setup</b></p>\n            </div>\n            <div className=\"row justify-content-center\">\n                <div className=\"form-check my-4\">\n                    <input className=\"form-check-input\" type=\"checkbox\" value={hasExecutionReward} onChange={(e) => setHasExecutionReward(e.target.checked)} id=\"executionReward\" />\n                    <label className=\"form-check-label\" htmlFor=\"executionReward\">\n                        Execution reward\n                    </label>\n                </div>\n            </div>\n            <div className=\"row mb-4\">\n                <p className=\"text-center text-small\">Lorem, ipsum dolor sit amet consectetur adipisicing elit. Omnis delectus incidunt laudantium distinctio velit reprehenderit quaerat, deserunt sint fugit ex consectetur voluptas suscipit numquam. Officiis maiores quaerat quod necessitatibus perspiciatis!</p>\n            </div>\n            {\n                hasExecutionReward && <div className=\"row mb-4 justify-content-center\">\n                    <div className=\"col-md-6 col-12\">\n                        <Input min={0} max={100} value={executionRewardAmount} onChange={(e) => setExecutionRewardAmount(e.target.value)} />\n                    </div>\n                </div>\n            }\n            <div className=\"col-12 mt-4\">\n                <button onClick={() => {\n                    setStep(step - 1);\n                }} className=\"btn btn-light mr-4\">Cancel</button> <button onClick={() => onFinish(getSetup())} className=\"btn btn-secondary ml-4\">Add</button>\n            </div>\n        </div>)\n    }\n\n    const listSetupEntries = () => {\n        return <div className=\"col-12 p-0\">\n                <div className=\"row flex-column align-items-start mb-4\">\n                    <h6 className=\"text-secondary\"><b>Setup inflation contract</b></h6>\n                    <p><b>{ title } setup</b></p>\n                </div>\n            {\n                setup.entries.map((entry, i) => {\n                    return (\n                        <div key={i} className=\"row align-items-center text-left mb-md-2 mb-4\">\n                            <div className=\"col-md-9 col-12\">\n                                <b style={{fontSize: 14}}>{entry.actionType} {entry.amount !== 0 ? entry.amount : `${entry.percentage}%`} {entry.inputToken.symbol} to {entry.receivers.length} wallet</b>\n                            </div>\n                            <div className=\"col-md-3 col-12 flex\">\n                                <button className=\"btn btn-sm btn-outline-danger mr-1\" onClick={() => removeEntry(i)}><b>X</b></button> <button onClick={() => setEditEntry({ ...entry, index: i })} className=\"btn btn-sm btn-danger ml-1\"><b>EDIT</b></button>\n                            </div>\n                        </div>\n                    )\n                })\n            }\n            <div className=\"row justify-content-between mt-4\">\n                <div className=\"col-12 flex justify-content-start mb-4\">\n                    <button onClick={() => setAdd(true)} className=\"btn btn-light\">Add entry</button>\n                </div>\n                <div className=\"col-12 mt-4\">\n                    <button onClick={() => {\n                        setStep(step - 1);\n                    }} className=\"btn btn-light mr-4\">Cancel</button> <button onClick={() => setStep(step + 1)} className=\"btn btn-secondary ml-4\">Next</button>\n                </div>\n            </div>\n        </div>\n    }\n\n    const getLoading = () => {\n        return <div className=\"col-12\">\n            <div className=\"row justify-content-center\">\n                <div className=\"spinner-border text-secondary\" role=\"status\">\n                    <span className=\"visually-hidden\"></span>\n                </div>\n            </div>\n        </div>\n\n    }\n\n    return loading ? getLoading() : getStep();\n}\n\nconst mapStateToProps = (state) => {\n    const { session } = state;\n    const { inflationSetups } = session;\n    return { inflationSetups };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addInflationSetup: (setup) => dispatch(addInflationSetup(setup)),\n        removeInflationSetup: (index) => dispatch(removeInflationSetup(index)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateSetup);","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/pages/inflation/dapp/components/CreateEntry.jsx",["394","395","396","397"],"import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { addEntry  } from '../../../../store/actions';\nimport { Coin, Input, TokenInput } from '../../../../components/shared';\nimport { useEffect } from 'react/cjs/react.development';\n\nconst CreateEntry = (props) => {\n    const { setup, onCancel, onFinish, entry } = props;\n    const [step, setStep] = useState(0);\n    // first step\n    const [actionType, setActionType] = useState(\"\");\n    // second step\n    const [inputToken, setInputToken] = useState(null);\n    const [inputTokenMethod, setInputTokenMethod] = useState(\"\");\n    // third step\n    const [transferType, setTransferType] = useState(\"\");\n    const [percentage, setPercentage] = useState(0);\n    const [amount, setAmount] = useState(0);\n    const [currentReceiver, setCurrentReceiver] = useState(\"\");\n    const [pathTokens, setPathTokens] = useState([]);\n    const [receivers, setReceivers] = useState([]);\n    // general\n    const [loading, setLoading] = useState(false);\n\n    // check if an entry has been passed in the props\n    useEffect(() => {\n        if (entry) {\n            setActionType(entry.actionType);\n            setInputToken(entry.inputToken);\n            setInputTokenMethod(entry.inputTokenMethod)\n            setAmount(entry.amount);\n            setPercentage(entry.percentage);\n            setTransferType(entry.transferType);\n            setReceivers(entry.receivers);\n            setPathTokens(entry.pathTokens);\n        }\n    }, []);\n\n    // second step methods\n    const onSelectInputToken = async (address) => {\n        if (!address) return;\n        setLoading(true);\n        const inputTokenContract = await props.dfoCore.getContract(props.dfoCore.getContextElement('ERC20ABI'), address);\n        const symbol = await inputTokenContract.methods.symbol().call();\n        setInputToken({ symbol, address });\n        setLoading(false);\n    }\n\n    // third step methods\n    const isValidPercentage = () => {\n        const totalPercentage = receivers.map((receiver) => receiver.percentage).reduce((acc, num) => acc + num);\n        return totalPercentage == 100;\n    }\n\n    const onPercentageChange = (index, percentage) => {\n        percentage = parseInt(percentage);\n        const updatedReceivers = receivers.map((receiver, i) => {\n            if (i === index) {\n                return { ...receiver, percentage };\n            }\n            return receiver;\n        });\n        setReceivers(updatedReceivers);\n    }\n\n    const onAddPathToken = async (address) => {\n        if (!address) return;\n        setLoading(true);\n        const pathTokenContract = await props.dfoCore.getContract(props.dfoCore.getContextElement('ERC20ABI'), address);\n        const symbol = await pathTokenContract.methods.symbol().call();\n        setPathTokens(pathTokens.concat({ symbol, address, output: null }));\n        setLoading(false);\n    }\n\n    const getEntry = () => {\n        return { \n            actionType,\n            inputToken, \n            inputTokenMethod, \n            amount, \n            percentage, \n            transferType, \n            receivers, \n            pathTokens,\n            index: entry ? entry.index : -1\n        }\n    }\n\n    // step retrieval methods\n    const getStep = () => {\n        switch (step) {\n            case 0:\n                return getFirstStep();\n            case 1:\n                return getSecondStep();\n            case 2:\n                return getThirdStep();\n            case 3:\n                return getFourthStep();\n            default:\n                return <div/>\n        }\n    }\n\n    const getFirstStep = () => {\n        return <div className=\"col-12\">\n            <div className=\"row flex-column align-items-start mb-4\">\n                <h6 className=\"text-secondary\"><b>Setup inflation contract</b></h6>\n                <p><b>{setup.title} setup</b></p>\n            </div>\n            <div className=\"row justify-content-center mb-4\">\n                <h6><b>Select action type</b></h6>\n            </div>\n            <div className=\"row justify-content-center mb-4\">\n                <button onClick={() => setActionType(actionType !== 'transfer' ? 'transfer' : \"\")} className={`btn ${actionType === 'transfer' ? \"btn-secondary\" : \"btn-outline-secondary\"} mr-4`}>Transfer</button>\n                <button onClick={() => setActionType(actionType !== 'swap' ? 'swap' : \"\")} className={`btn ${actionType === 'swap' ? \"btn-secondary\" : \"btn-outline-secondary\"}`}>Swap</button>\n            </div>\n            <div className=\"row mb-4\">\n                <p style={{fontSize: 14}}>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quaerat animi ipsam nemo at nobis odit temporibus autem possimus quae vel, ratione numquam modi rem accusamus, veniam neque voluptates necessitatibus enim!</p>\n            </div>\n            <div className=\"row justify-content-center\">\n                <button onClick={() => {\n                    setActionType(\"\");\n                    onCancel();\n                }} className=\"btn btn-light mr-4\">Cancel</button>\n                <button onClick={() => setStep(1)} disabled={!actionType} className=\"btn btn-primary\">Next</button>\n            </div>\n        </div>\n    }\n\n    const getSecondStep = () => {\n        return <div className=\"col-12 flex flex-column align-items-center\">\n            <div className=\"row\">\n                <TokenInput label={\"Input token\"} placeholder={\"Input token address\"} width={60} onClick={(address) => onSelectInputToken(address)} text={\"Load\"} />\n            </div>\n            {\n                !inputToken && \n                <div className=\"row mb-4\">\n                    <p style={{fontSize: 12}}>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quaerat animi ipsam nemo at nobis odit temporibus autem possimus quae vel, ratione numquam modi rem accusamus, veniam neque voluptates necessitatibus enim!</p>\n                </div>\n            }\n            {\n                loading ? <div className=\"row justify-content-center\">\n                    <div className=\"spinner-border text-secondary\" role=\"status\">\n                        <span className=\"visually-hidden\"></span>\n                    </div>\n                </div> : <>\n                    <div className=\"row mb-4\">\n                        { inputToken && <div className=\"col-12\">\n                                <b>{inputToken.symbol}</b> <Coin address={inputToken.address} className=\"ml-2\" />\n                            </div>\n                        }\n                    </div>\n                    <div className=\"row w-50 mb-4\">\n                        <select value={inputTokenMethod} onChange={(e) => setInputTokenMethod(e.target.value)} className=\"custom-select wusd-pair-select\">\n                            <option value=\"\">Select method</option>\n                            <option value=\"mint\">By mint</option>\n                            <option value=\"reserve\">By reserve</option>\n                        </select>\n                    </div>\n                    <div className=\"row mb-4\">\n                        <p style={{fontSize: 12}}>Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quaerat animi ipsam nemo at nobis odit temporibus autem possimus quae vel, ratione numquam modi rem accusamus, veniam neque voluptates necessitatibus enim!</p>\n                    </div>\n                </>\n            }\n            <div className=\"row justify-content-center\">\n                <button onClick={() => {\n                    setInputToken(null);\n                    setInputTokenMethod(\"\");\n                    setStep(step - 1);\n                }} className=\"btn btn-light mr-4\">Cancel</button>\n                <button onClick={() => setStep(2)} disabled={!inputToken || !inputTokenMethod} className=\"btn btn-secondary\">Next</button>\n            </div>\n        </div>\n    }\n\n    const getTransferThirdStep = () => {\n        return <>\n        <div className=\"row mb-4\">\n            <h6 className=\"text-secondary\"><b>Transfer</b></h6>\n        </div>\n        <div className=\"row w-50 mb-4\">\n            <select value={transferType} onChange={(e) => setTransferType(e.target.value)} className=\"custom-select wusd-pair-select\">\n                <option value=\"\">Select type</option>\n                <option value=\"percentage\">Percentage</option>\n                <option value=\"amount\">Amount</option>\n            </select>\n        </div>\n        {\n            transferType ? \n                transferType == 'percentage' ? \n                    <div className=\"row mb-4 justify-content-center align-items-center\">\n                        <input type=\"number\" min={0} max={100} value={percentage} onChange={(e) => setPercentage(e.target.value)} className=\"form-control mr-2\" style={{width: '33%'}} />% of { inputToken.symbol } <Coin address={inputToken.address} className=\"ml-2\" />\n                    </div>\n                : \n                    <div className=\"row mb-4 justify-content-center align-items-center\">\n                        <Input showCoin={true} address={inputToken.address} name={inputToken.symbol} value={amount} onChange={(e) => setAmount(e.target.value)} />\n                    </div>\n            : <div/>\n        }\n        {\n            transferType ? <>\n                <div className=\"row\">\n                    <h6><b>Receiver</b></h6>\n                </div>\n                <div className=\"row\">\n                    <div className=\"input-group mb-3\">\n                        <input type=\"text\"  value={currentReceiver} onChange={(e) => setCurrentReceiver(e.target.value)} className=\"form-control\" placeholder=\"Address\" aria-label=\"Receiver\" aria-describedby=\"button-add\" />\n                        <button onClick={() => {\n                            const exists = receivers.filter((r) => r.address.toLowerCase() === currentReceiver.toLowerCase()).length > 0;\n                            if (exists) return;\n                            setReceivers(receivers.concat({ address: currentReceiver, percentage: receivers.length === 0 ? 100 : 0}));\n                            setCurrentReceiver(\"\");\n                        }} className=\"btn btn-outline-secondary ml-2\" type=\"button\" id=\"button-add\">Add</button>\n                    </div>\n                </div>\n                <div className=\"row mb-4\">\n                    {\n                        receivers.map((receiver, index) => {\n                            return (\n                                <div className=\"col-12 mb-2\">\n                                    {\n                                        receivers.length === 1 ? <div key={receiver.address} className=\"row align-items-center\">\n                                            <b>{receiver.address}</b>\n                                            <button onClick={() => setReceivers(receivers.filter((_, i) => i !== index))} className=\"btn btn-danger btn-sm ml-2\">X</button>\n                                        </div> : <div key={receiver.address} className=\"row align-items-center\">\n                                            <div className=\"col-md-8 col-12\">\n                                                <b>{receiver.address}</b>\n                                            </div>\n                                            <div className=\"col-md-2 col-12\">\n                                                <input type=\"number\" min={0} max={100} onChange={(e) => onPercentageChange(index, e.target.value)} className=\"form-control mr-1\" value={receiver.percentage} />\n                                            </div>\n                                            <div className=\"col-md-2 col-12\">\n                                                <button onClick={() => setReceivers(receivers.filter((_, i) => i !== index))} className=\"btn btn-danger btn-sm\">X</button>\n                                            </div>    \n                                        </div>\n                                    }\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n                </> : <div/>\n            }\n        </>\n    }\n\n    const getSwapThirdStep = () => {\n        return <>\n            <div className=\"row mb-4\">\n                <h6 className=\"text-secondary\"><b>Swap</b></h6>\n            </div>\n            <div className=\"row w-50 mb-4\">\n                <select value={transferType} onChange={(e) => setTransferType(e.target.value)} className=\"custom-select wusd-pair-select\">\n                    <option value=\"\">Select type</option>\n                    <option value=\"percentage\">Percentage</option>\n                    <option value=\"amount\">Amount</option>\n                </select>\n            </div>\n            {\n                transferType ? \n                    transferType == 'percentage' ? \n                        <div className=\"row mb-4 justify-content-center align-items-center\">\n                            <input type=\"number\" min={0} max={100} value={percentage} onChange={(e) => setPercentage(e.target.value)} className=\"form-control mr-2\" style={{width: '33%'}} />% of { inputToken.symbol } <Coin address={inputToken.address} className=\"ml-2\" />\n                        </div>\n                    : \n                        <div className=\"row mb-4 justify-content-center align-items-center\">\n                            <Input showCoin={true} address={inputToken.address} name={inputToken.symbol} value={amount} onChange={(e) => setAmount(e.target.value)} />\n                        </div>\n                : <div/>\n            }\n            <div className=\"row mb-4\">\n                <TokenInput label={\"Path\"} placeholder={\"LPT address\"} width={60} onClick={(address) => onAddPathToken(address)} text={\"Load\"} />\n            </div>\n            {\n                loading ? <div className=\"row justify-content-center\">\n                    <div className=\"spinner-border text-secondary\" role=\"status\">\n                        <span className=\"visually-hidden\"></span>\n                    </div>\n                </div> : <>\n                {\n                    pathTokens.length > 0 && pathTokens.map((pathToken, index) => {\n                        return (\n                            <>\n                                <div className=\"row mb-4\">\n                                    { pathToken && <div className=\"col-12\">\n                                            <b>{pathToken.address}</b> {index === pathTokens.length -1 ?  <button className=\"btn btn-sm btn-outline-danger ml-1\" onClick={() => setPathTokens(pathTokens.filter((_, i) => i !== index))}><b>Remove</b></button> : <div/>}\n                                        </div>\n                                    }\n                                </div>\n                                <div className=\"row w-50 mb-4\">\n                                    <select value={pathToken.output} onChange={(e) => setPathTokens(pathTokens.map((pt, i) => i === index ? { ...pt, output: e.target.value } : pt))} className=\"custom-select wusd-pair-select\">\n                                        <option value={null}>Output</option>\n                                        <option value=\"ETH\">ETH</option>\n                                        <option value=\"buidl\">buidl</option>\n                                    </select>\n                                </div>\n                            </>\n                        )\n                    })\n                }\n                </>\n            }\n            {\n                transferType ? <>\n                    <div className=\"row\">\n                        <h6><b>Receiver</b></h6>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"input-group mb-3\">\n                            <input type=\"text\"  value={currentReceiver} onChange={(e) => setCurrentReceiver(e.target.value)} className=\"form-control\" placeholder=\"Address\" aria-label=\"Receiver\" aria-describedby=\"button-add\" />\n                            <button onClick={() => {\n                                const exists = receivers.filter((r) => r.address.toLowerCase() === currentReceiver.toLowerCase()).length > 0;\n                                if (exists) return;\n                                setReceivers(receivers.concat({ address: currentReceiver, percentage: receivers.length === 0 ? 100 : 0}));\n                                setCurrentReceiver(\"\");\n                            }} className=\"btn btn-outline-secondary ml-2\" type=\"button\" id=\"button-add\">Add</button>\n                        </div>\n                    </div>\n                    <div className=\"row mb-4\">\n                        {\n                            receivers.map((receiver, index) => {\n                                return (\n                                    <div className=\"col-12 mb-2\">\n                                        {\n                                            receivers.length === 1 ? <div className=\"row align-items-center\">\n                                                <b>{receiver.address}</b>\n                                                <button onClick={() => setReceivers(receivers.filter((_, i) => i !== index))} className=\"btn btn-danger btn-sm ml-2\">X</button>\n                                            </div> : <div className=\"row align-items-center\">\n                                                <div className=\"col-md-8 col-12\">\n                                                    <b>{receiver.address}</b>\n                                                </div>\n                                                <div className=\"col-md-2 col-12\">\n                                                    <input type=\"number\" min={0} max={100} onChange={(e) => onPercentageChange(index, e.target.value)} className=\"form-control mr-1\" value={receiver.percentage} />\n                                                </div>\n                                                <div className=\"col-md-2 col-12\">\n                                                    <button onClick={() => setReceivers(receivers.filter((_, i) => i !== index))} className=\"btn btn-danger btn-sm\">X</button>\n                                                </div>    \n                                            </div>\n                                        }\n                                    </div>\n                                )\n                            })\n                        }\n                    </div>\n                </> : <div/>\n            }\n        </>\n    }\n\n    const getThirdStep = () => {\n        return <div className=\"col-12 flex flex-column align-items-center\">\n            { actionType === 'transfer' ? getTransferThirdStep() : getSwapThirdStep() }\n            <div className=\"row justify-content-center\">\n                <button onClick={() => setStep(step -1)} className=\"btn btn-light mr-4\">Cancel</button>\n                <button onClick={() => onFinish(getEntry())} disabled={(!amount && !percentage) || !transferType || receivers.length === 0 || !isValidPercentage()} className=\"btn btn-secondary\">Add</button>\n            </div>\n        </div>\n    }\n\n    const getFourthStep = () => {\n        return <div/>\n    }\n\n    return getStep();\n}\n\nconst mapStateToProps = (state) => {\n    const { core, session } = state;\n    const { dfoCore } = core;\n    const { inflationSetups } = session;\n    return { dfoCore, inflationSetups };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addEntry: (entry, setupIndex) => dispatch(addEntry(entry, setupIndex)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateEntry);","/Users/prollo/Projects/cidaro/buidl/covenants-fe/src/components/editor/ContractEditor.jsx",["398"],"import Editor from \"@monaco-editor/react\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react/cjs/react.development\";\n\nconst ContractEditor = (props) => {\n    const { onChange, dfoCore, onFinish } = props;\n    const [contractCode, setContractCode] = useState(\"\");\n    const [solidityVersions, setSolidityVersions] = useState([]);\n    const [solVersion, setSolVersion] = useState(\"\");\n    const [contracts, setContracts] = useState(null);\n    const [contract, setContract] = useState(null);\n    const [contractPayload, setContractPayload] = useState(\"\");\n\n    useEffect(() => {\n        getSolidityData()\n    }, []);\n\n    const getSolidityData = async () => {\n        const { releases } = await window.SolidityUtilities.getCompilers();\n        setSolidityVersions(releases);\n    }\n\n    const onUpdateContractCode = (value, event) => {\n        setContractCode(value);\n        onChange(value, event);\n    }\n\n    const onUploadFile = async (e) => {\n        var file = e.target.files[0];\n        var reader = new FileReader();\n        reader.onload = function(event) {\n            setContractCode(event.target.result);\n        };\n        reader.readAsText(file);\n    }\n\n    const compileContractCode = async () => {\n        const result = await window.SolidityUtilities.compile(contractCode, solVersion);\n        setContracts(result.optimized);\n    }\n\n    const setChosenContract = (value) => {\n        console.log(contracts[value]);\n        setContract(value);\n        onFinish(contracts[value], contractPayload);\n    }\n\n    return (\n        <>  \n            <div className=\"row mb-4\">\n                <div className=\"col-md-6 col-12\">\n                    <select className=\"custom-select wusd-pair-select\" value={solVersion} onChange={(e) => setSolVersion(e.target.value)}>\n                        <option value={\"\"}>Choose version</option>\n                        {\n                            Object.keys(solidityVersions).map((item) => {\n                                return <option value={solidityVersions[item]}>{item}</option>\n                            })\n                        }\n                    </select>\n                </div>\n                <div className=\"col-md-3\"></div>\n                <div className=\"col-md-3 col-12\">\n                    <div class=\"custom-file\">\n                        <input type=\"file\" class=\"custom-file-input\" id=\"customFile\" onChange={(e) => onUploadFile(e)} />\n                        <label class=\"custom-file-label\" for=\"customFile\"></label>\n                    </div>\n                </div>\n            </div>\n            <div className=\"row mb-4\">\n                <Editor\n                    value={contractCode}\n                    height=\"80vh\"\n                    defaultLanguage=\"sol\"\n                    defaultValue=\"\"\n                    onChange={(value, event) => onUpdateContractCode(value, event)}\n                />\n            </div>\n            <div className=\"row\">\n                <div className=\"col-md-6 col-12\">\n                    <button onClick={() => compileContractCode()} disabled={!solVersion} className=\"btn btn-secondary\">Compile</button>\n                </div>\n                <div className=\"col-md-6 col-12\">\n                    {\n                        contracts && <select className=\"custom-select wusd-pair-select\" value={contract} onChange={(e) => setChosenContract(e.target.value)}>\n                            <option value={\"\"}>Choose contract</option>\n                            {\n                                Object.keys(contracts).map((item) => {\n                                    return <option value={item}>{item}</option>\n                                })\n                            }\n                        </select>\n                    }\n                </div>\n            </div>\n            {\n                contract && <div className=\"row mt-4 justify-content-center\">\n                    <div className=\"col-md-6 col-12\">\n                        <input type=\"text\" className=\"form-control\" value={contractPayload} onChange={(e) => setContractPayload(e.target.value)} onBlur={() => onFinish(contracts[contract], contractPayload)} placeholder={\"Payload, if any\"} aria-label={\"Payload, if any\"}/>\n                    </div>\n                </div>\n            }\n        </>\n    )\n}\n\nexport default ContractEditor;",{"ruleId":"399","replacedBy":"400"},{"ruleId":"401","replacedBy":"402"},{"ruleId":"403","severity":1,"message":"404","line":11,"column":25,"nodeType":"405","endLine":11,"endColumn":74},{"ruleId":"406","severity":1,"message":"407","line":3,"column":25,"nodeType":"408","messageId":"409","endLine":3,"endColumn":34},{"ruleId":"403","severity":1,"message":"404","line":15,"column":29,"nodeType":"405","endLine":15,"endColumn":88},{"ruleId":"403","severity":1,"message":"404","line":36,"column":25,"nodeType":"405","endLine":36,"endColumn":82},{"ruleId":"406","severity":1,"message":"410","line":2,"column":8,"nodeType":"408","messageId":"409","endLine":2,"endColumn":17},{"ruleId":"406","severity":1,"message":"411","line":7,"column":103,"nodeType":"408","messageId":"409","endLine":7,"endColumn":107},{"ruleId":"403","severity":1,"message":"404","line":4,"column":12,"nodeType":"405","endLine":4,"endColumn":230},{"ruleId":"406","severity":1,"message":"410","line":1,"column":8,"nodeType":"408","messageId":"409","endLine":1,"endColumn":17},{"ruleId":"406","severity":1,"message":"412","line":8,"column":62,"nodeType":"408","messageId":"409","endLine":8,"endColumn":70},{"ruleId":"413","severity":1,"message":"414","line":13,"column":8,"nodeType":"415","endLine":13,"endColumn":10,"suggestions":"416"},{"ruleId":"406","severity":1,"message":"412","line":6,"column":45,"nodeType":"408","messageId":"409","endLine":6,"endColumn":53},{"ruleId":"406","severity":1,"message":"417","line":6,"column":94,"nodeType":"408","messageId":"409","endLine":6,"endColumn":98},{"ruleId":"406","severity":1,"message":"418","line":6,"column":100,"nodeType":"408","messageId":"409","endLine":6,"endColumn":106},{"ruleId":"406","severity":1,"message":"419","line":20,"column":12,"nodeType":"408","messageId":"409","endLine":20,"endColumn":26},{"ruleId":"406","severity":1,"message":"420","line":20,"column":28,"nodeType":"408","messageId":"409","endLine":20,"endColumn":45},{"ruleId":"406","severity":1,"message":"421","line":27,"column":12,"nodeType":"408","messageId":"409","endLine":27,"endColumn":21},{"ruleId":"406","severity":1,"message":"422","line":32,"column":12,"nodeType":"408","messageId":"409","endLine":32,"endColumn":33},{"ruleId":"406","severity":1,"message":"423","line":32,"column":35,"nodeType":"408","messageId":"409","endLine":32,"endColumn":59},{"ruleId":"413","severity":1,"message":"424","line":36,"column":8,"nodeType":"415","endLine":36,"endColumn":10,"suggestions":"425"},{"ruleId":"406","severity":1,"message":"426","line":86,"column":23,"nodeType":"408","messageId":"409","endLine":86,"endColumn":34},{"ruleId":"406","severity":1,"message":"427","line":206,"column":23,"nodeType":"408","messageId":"409","endLine":206,"endColumn":29},{"ruleId":"406","severity":1,"message":"427","line":212,"column":23,"nodeType":"408","messageId":"409","endLine":212,"endColumn":29},{"ruleId":"406","severity":1,"message":"427","line":230,"column":23,"nodeType":"408","messageId":"409","endLine":230,"endColumn":29},{"ruleId":"406","severity":1,"message":"427","line":246,"column":19,"nodeType":"408","messageId":"409","endLine":246,"endColumn":25},{"ruleId":"406","severity":1,"message":"428","line":6,"column":24,"nodeType":"408","messageId":"409","endLine":6,"endColumn":31},{"ruleId":"406","severity":1,"message":"429","line":6,"column":33,"nodeType":"408","messageId":"409","endLine":6,"endColumn":38},{"ruleId":"406","severity":1,"message":"430","line":12,"column":12,"nodeType":"408","messageId":"409","endLine":12,"endColumn":19},{"ruleId":"431","severity":1,"message":"432","line":1,"column":1,"nodeType":"433","endLine":111,"endColumn":4},{"ruleId":"434","severity":1,"message":"435","line":49,"column":5,"nodeType":"436","messageId":"437","endLine":49,"endColumn":23},{"ruleId":"434","severity":1,"message":"438","line":51,"column":5,"nodeType":"436","messageId":"437","endLine":51,"endColumn":22},{"ruleId":"439","severity":1,"message":"440","line":282,"column":11,"nodeType":"408","messageId":"441","endLine":282,"endColumn":12},{"ruleId":"413","severity":1,"message":"442","line":15,"column":8,"nodeType":"415","endLine":15,"endColumn":10,"suggestions":"443"},{"ruleId":"413","severity":1,"message":"444","line":10,"column":8,"nodeType":"415","endLine":10,"endColumn":10,"suggestions":"445"},{"ruleId":"413","severity":1,"message":"414","line":14,"column":8,"nodeType":"415","endLine":14,"endColumn":10,"suggestions":"446"},{"ruleId":"406","severity":1,"message":"447","line":5,"column":7,"nodeType":"408","messageId":"409","endLine":5,"endColumn":16},{"ruleId":"413","severity":1,"message":"448","line":12,"column":8,"nodeType":"415","endLine":12,"endColumn":10,"suggestions":"449"},{"ruleId":"406","severity":1,"message":"450","line":7,"column":30,"nodeType":"408","messageId":"409","endLine":7,"endColumn":49},{"ruleId":"413","severity":1,"message":"451","line":11,"column":8,"nodeType":"415","endLine":11,"endColumn":10,"suggestions":"452"},{"ruleId":"406","severity":1,"message":"453","line":13,"column":12,"nodeType":"408","messageId":"409","endLine":13,"endColumn":29},{"ruleId":"406","severity":1,"message":"454","line":14,"column":12,"nodeType":"408","messageId":"409","endLine":14,"endColumn":30},{"ruleId":"406","severity":1,"message":"455","line":15,"column":12,"nodeType":"408","messageId":"409","endLine":15,"endColumn":26},{"ruleId":"406","severity":1,"message":"456","line":15,"column":28,"nodeType":"408","messageId":"409","endLine":15,"endColumn":45},{"ruleId":"406","severity":1,"message":"457","line":16,"column":12,"nodeType":"408","messageId":"409","endLine":16,"endColumn":22},{"ruleId":"406","severity":1,"message":"458","line":16,"column":24,"nodeType":"408","messageId":"409","endLine":16,"endColumn":37},{"ruleId":"413","severity":1,"message":"459","line":28,"column":8,"nodeType":"415","endLine":28,"endColumn":10,"suggestions":"460"},{"ruleId":"406","severity":1,"message":"461","line":65,"column":19,"nodeType":"408","messageId":"409","endLine":65,"endColumn":27},{"ruleId":"462","severity":1,"message":"463","line":85,"column":13,"nodeType":"464","messageId":"465","endLine":87,"endColumn":24},{"ruleId":"406","severity":1,"message":"466","line":113,"column":15,"nodeType":"408","messageId":"409","endLine":113,"endColumn":34},{"ruleId":"406","severity":1,"message":"467","line":119,"column":15,"nodeType":"408","messageId":"409","endLine":119,"endColumn":21},{"ruleId":"406","severity":1,"message":"468","line":5,"column":8,"nodeType":"408","messageId":"409","endLine":5,"endColumn":14},{"ruleId":"406","severity":1,"message":"469","line":11,"column":7,"nodeType":"408","messageId":"409","endLine":11,"endColumn":11},{"ruleId":"413","severity":1,"message":"470","line":60,"column":8,"nodeType":"415","endLine":60,"endColumn":10,"suggestions":"471"},{"ruleId":"472","severity":1,"message":"473","line":229,"column":13,"nodeType":"408","messageId":"437","endLine":229,"endColumn":18},{"ruleId":"472","severity":1,"message":"473","line":271,"column":13,"nodeType":"408","messageId":"437","endLine":271,"endColumn":18},{"ruleId":"406","severity":1,"message":"474","line":18,"column":12,"nodeType":"408","messageId":"409","endLine":18,"endColumn":27},{"ruleId":"413","severity":1,"message":"459","line":24,"column":8,"nodeType":"415","endLine":24,"endColumn":10,"suggestions":"475"},{"ruleId":"462","severity":1,"message":"476","line":73,"column":13,"nodeType":"464","messageId":"477","endLine":74,"endColumn":46},{"ruleId":"462","severity":1,"message":"476","line":75,"column":13,"nodeType":"464","messageId":"477","endLine":76,"endColumn":42},{"ruleId":"462","severity":1,"message":"463","line":77,"column":13,"nodeType":"464","messageId":"465","endLine":78,"endColumn":24},{"ruleId":"478","severity":1,"message":"479","line":168,"column":25,"nodeType":"480","messageId":"437","endLine":168,"endColumn":27},{"ruleId":"478","severity":1,"message":"479","line":168,"column":46,"nodeType":"480","messageId":"437","endLine":168,"endColumn":48},{"ruleId":"406","severity":1,"message":"481","line":11,"column":26,"nodeType":"408","messageId":"409","endLine":11,"endColumn":41},{"ruleId":"406","severity":1,"message":"482","line":12,"column":24,"nodeType":"408","messageId":"409","endLine":12,"endColumn":37},{"ruleId":"406","severity":1,"message":"483","line":13,"column":27,"nodeType":"408","messageId":"409","endLine":13,"endColumn":43},{"ruleId":"406","severity":1,"message":"484","line":15,"column":12,"nodeType":"408","messageId":"409","endLine":15,"endColumn":27},{"ruleId":"406","severity":1,"message":"485","line":15,"column":29,"nodeType":"408","messageId":"409","endLine":15,"endColumn":47},{"ruleId":"406","severity":1,"message":"486","line":21,"column":12,"nodeType":"408","messageId":"409","endLine":21,"endColumn":24},{"ruleId":"406","severity":1,"message":"487","line":22,"column":12,"nodeType":"408","messageId":"409","endLine":22,"endColumn":25},{"ruleId":"406","severity":1,"message":"488","line":23,"column":12,"nodeType":"408","messageId":"409","endLine":23,"endColumn":25},{"ruleId":"406","severity":1,"message":"489","line":23,"column":27,"nodeType":"408","messageId":"409","endLine":23,"endColumn":43},{"ruleId":"406","severity":1,"message":"490","line":24,"column":12,"nodeType":"408","messageId":"409","endLine":24,"endColumn":39},{"ruleId":"406","severity":1,"message":"491","line":25,"column":12,"nodeType":"408","messageId":"409","endLine":25,"endColumn":39},{"ruleId":"413","severity":1,"message":"492","line":36,"column":8,"nodeType":"415","endLine":36,"endColumn":10,"suggestions":"493"},{"ruleId":"406","severity":1,"message":"486","line":8,"column":12,"nodeType":"408","messageId":"409","endLine":8,"endColumn":24},{"ruleId":"406","severity":1,"message":"489","line":10,"column":27,"nodeType":"408","messageId":"409","endLine":10,"endColumn":43},{"ruleId":"406","severity":1,"message":"494","line":13,"column":12,"nodeType":"408","messageId":"409","endLine":13,"endColumn":35},{"ruleId":"406","severity":1,"message":"495","line":18,"column":12,"nodeType":"408","messageId":"409","endLine":18,"endColumn":23},{"ruleId":"406","severity":1,"message":"496","line":20,"column":12,"nodeType":"408","messageId":"409","endLine":20,"endColumn":23},{"ruleId":"406","severity":1,"message":"497","line":23,"column":27,"nodeType":"408","messageId":"409","endLine":23,"endColumn":43},{"ruleId":"413","severity":1,"message":"498","line":27,"column":8,"nodeType":"415","endLine":27,"endColumn":10,"suggestions":"499"},{"ruleId":"462","severity":1,"message":"476","line":88,"column":13,"nodeType":"464","messageId":"477","endLine":89,"endColumn":37},{"ruleId":"462","severity":1,"message":"463","line":90,"column":13,"nodeType":"464","messageId":"465","endLine":91,"endColumn":24},{"ruleId":"406","severity":1,"message":"500","line":1,"column":10,"nodeType":"408","messageId":"409","endLine":1,"endColumn":19},{"ruleId":"406","severity":1,"message":"501","line":3,"column":35,"nodeType":"408","messageId":"409","endLine":3,"endColumn":51},{"ruleId":"406","severity":1,"message":"502","line":10,"column":12,"nodeType":"408","messageId":"409","endLine":10,"endColumn":19},{"ruleId":"413","severity":1,"message":"503","line":16,"column":8,"nodeType":"415","endLine":16,"endColumn":10,"suggestions":"504"},{"ruleId":"406","severity":1,"message":"500","line":1,"column":10,"nodeType":"408","messageId":"409","endLine":1,"endColumn":19},{"ruleId":"406","severity":1,"message":"502","line":6,"column":12,"nodeType":"408","messageId":"409","endLine":6,"endColumn":19},{"ruleId":"406","severity":1,"message":"505","line":6,"column":21,"nodeType":"408","messageId":"409","endLine":6,"endColumn":31},{"ruleId":"406","severity":1,"message":"506","line":7,"column":21,"nodeType":"408","messageId":"409","endLine":7,"endColumn":31},{"ruleId":"406","severity":1,"message":"507","line":5,"column":29,"nodeType":"408","messageId":"409","endLine":5,"endColumn":40},{"ruleId":"413","severity":1,"message":"508","line":25,"column":5,"nodeType":"408","endLine":25,"endColumn":14,"suggestions":"509"},{"ruleId":"413","severity":1,"message":"510","line":37,"column":8,"nodeType":"415","endLine":37,"endColumn":10,"suggestions":"511"},{"ruleId":"478","severity":1,"message":"512","line":52,"column":32,"nodeType":"480","messageId":"437","endLine":52,"endColumn":34},{"ruleId":"478","severity":1,"message":"512","line":191,"column":30,"nodeType":"480","messageId":"437","endLine":191,"endColumn":32},{"ruleId":"478","severity":1,"message":"512","line":262,"column":34,"nodeType":"480","messageId":"437","endLine":262,"endColumn":36},{"ruleId":"406","severity":1,"message":"428","line":6,"column":23,"nodeType":"408","messageId":"409","endLine":6,"endColumn":30},"no-native-reassign",["513"],"no-negated-in-lhs",["514"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","'PropTypes' is defined but never used.","'step' is assigned a value but never used.","'hostedBy' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getContractMetadata'. Either include it or remove the dependency array.","ArrayExpression",["515"],"'farm' is assigned a value but never used.","'redeem' is assigned a value but never used.","'setupLiquidity' is assigned a value but never used.","'setSetupLiquidity' is assigned a value but never used.","'extension' is assigned a value but never used.","'updatedRewardPerBlock' is assigned a value but never used.","'setUpdatedRewardPerBlock' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSetupMetadata'. Either include it or remove the dependency array.",["516"],"'totalSupply' is assigned a value but never used.","'result' is assigned a value but never used.","'dfoCore' is assigned a value but never used.","'entry' is assigned a value but never used.","'address' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-dupe-keys","Duplicate key 'usdcTokenAddress'.","ObjectExpression","unexpected","Duplicate key 'daiTokenAddress'.","no-redeclare","'e' is already defined.","redeclared","React Hook useEffect has missing dependencies: 'getDeployedContracts' and 'props.dfoCore'. Either include them or remove the dependency array.",["517"],"React Hook useEffect has a missing dependency: 'getPositions'. Either include it or remove the dependency array.",["518"],["519"],"'contracts' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getContracts'. Either include it or remove the dependency array.",["520"],"'setFarmingContracts' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getFarmingSetups'. Either include it or remove the dependency array.",["521"],"'firstTokenBalance' is assigned a value but never used.","'secondTokenBalance' is assigned a value but never used.","'lpTokenBalance' is assigned a value but never used.","'setLpTokenBalance' is assigned a value but never used.","'wusdAmount' is assigned a value but never used.","'setWusdAmount' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getController'. Either include it or remove the dependency array.",["522"],"'wusdInfo' is assigned a value but never used.","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","'liquidityPoolAmount' is assigned a value but never used.","'ratio2' is assigned a value but never used.","'Editor' is defined but never used.","'code' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentBlockNumber', 'props.dfoCore', and 'props.farmingContract.rewardToken'. Either include them or remove the dependency array. If 'setSelectedRewardToken' needs the current value of 'props.farmingContract.rewardToken', you can also switch to useReducer instead of useState and read 'props.farmingContract.rewardToken' in the reducer.",["523"],"no-ex-assign","Do not assign to the exception parameter.","'lpTokenApproved' is assigned a value but never used.",["524"],"Expected a 'break' statement before 'case'.","case","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'setFarmTreasury' is assigned a value but never used.","'setFarmReward' is assigned a value but never used.","'setNewFarmReward' is assigned a value but never used.","'rebalanceReward' is assigned a value but never used.","'setRebalanceReward' is assigned a value but never used.","'wusdContract' is assigned a value but never used.","'x2USDContract' is assigned a value but never used.","'x5USDContract' is assigned a value but never used.","'setx5USDContract' is assigned a value but never used.","'x2USDNoteControllerContract' is assigned a value but never used.","'x5USDNoteControllerContract' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getStats'. Either include it or remove the dependency array.",["525"],"'wusdExtensionController' is assigned a value but never used.","'x2USDSupply' is assigned a value but never used.","'x5USDSupply' is assigned a value but never used.","'setx5USDNoteInfo' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["526"],"'useEffect' is defined but never used.","'FarmingComponent' is defined but never used.","'loading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.dfoCore'. Either include it or remove the dependency array.",["527"],"'setLoading' is assigned a value but never used.","'setEntries' is assigned a value but never used.","'removeEntry' is defined but never used.","React Hook useEffect contains a call to 'setTitle'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [editSetup] as a second argument to the useEffect Hook.",["528"],"React Hook useEffect has a missing dependency: 'entry'. Either include it or remove the dependency array.",["529"],"Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation",{"desc":"530","fix":"531"},{"desc":"532","fix":"533"},{"desc":"534","fix":"535"},{"desc":"536","fix":"537"},{"desc":"530","fix":"538"},{"desc":"539","fix":"540"},{"desc":"541","fix":"542"},{"desc":"543","fix":"544"},{"desc":"545","fix":"546"},{"desc":"543","fix":"547"},{"desc":"548","fix":"549"},{"desc":"550","fix":"551"},{"desc":"552","fix":"553"},{"desc":"554","fix":"555"},{"desc":"556","fix":"557"},"Update the dependencies array to be: [getContractMetadata]",{"range":"558","text":"559"},"Update the dependencies array to be: [getSetupMetadata]",{"range":"560","text":"561"},"Update the dependencies array to be: [getDeployedContracts, props.dfoCore]",{"range":"562","text":"563"},"Update the dependencies array to be: [getPositions]",{"range":"564","text":"565"},{"range":"566","text":"559"},"Update the dependencies array to be: [getContracts]",{"range":"567","text":"568"},"Update the dependencies array to be: [getFarmingSetups]",{"range":"569","text":"570"},"Update the dependencies array to be: [getController]",{"range":"571","text":"572"},"Update the dependencies array to be: [currentBlockNumber, props.dfoCore, props.farmingContract.rewardToken]",{"range":"573","text":"574"},{"range":"575","text":"572"},"Update the dependencies array to be: [getStats]",{"range":"576","text":"577"},"Update the dependencies array to be: [getData]",{"range":"578","text":"579"},"Update the dependencies array to be: [props.dfoCore]",{"range":"580","text":"581"},"Add dependencies array: [editSetup]",{"range":"582","text":"583"},"Update the dependencies array to be: [entry]",{"range":"584","text":"585"},[415,417],"[getContractMetadata]",[1954,1956],"[getSetupMetadata]",[519,521],"[getDeployedContracts, props.dfoCore]",[287,289],"[getPositions]",[456,458],[427,429],"[getContracts]",[346,348],"[getFarmingSetups]",[1242,1244],"[getController]",[3122,3124],"[currentBlockNumber, props.dfoCore, props.farmingContract.rewardToken]",[1134,1136],[1848,1850],"[getStats]",[1335,1337],"[getData]",[633,635],"[props.dfoCore]",[1329,1329],", [editSetup]",[1492,1494],"[entry]"]